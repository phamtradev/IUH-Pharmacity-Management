<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/vn/edu/iuh/fit/iuhpharmacitymanagement/gui/staff/form/MainForm.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/vn/edu/iuh/fit/iuhpharmacitymanagement/gui/staff/form/MainForm.java" />
              <option name="originalContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.form;&#10;&#10;import com.formdev.flatlaf.FlatClientProperties;&#10;import com.formdev.flatlaf.extras.FlatSVGIcon;&#10;import com.formdev.flatlaf.util.UIScale;&#10;import java.awt.BorderLayout;&#10;import java.awt.Component;&#10;import java.awt.ComponentOrientation;&#10;import java.awt.Container;&#10;import java.awt.Dimension;&#10;import java.awt.Insets;&#10;import java.awt.LayoutManager;&#10;import java.awt.event.ActionEvent;&#10;import javax.swing.JButton;&#10;import javax.swing.JLayeredPane;&#10;import javax.swing.JPanel;&#10;import javax.swing.border.EmptyBorder;&#10;import vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.form.other.FormInbox;&#10;import vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.form.other.FormRead;&#10;import vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.menu.Menu;&#10;&#10;/**&#10; *&#10; * @author PhamTra&#10; */&#10;public class MainForm extends JLayeredPane {&#10;&#10;    public MainForm() {&#10;        init();&#10;    }&#10;&#10;    private void init() {&#10;        setBorder(new EmptyBorder(0, 0, 0, 0));&#10;        setLayout(new MainFormLayout());&#10;        setBackground(java.awt.Color.WHITE);&#10;        putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;background:#FFFFFF;&quot;&#10;                + &quot;border:0,0,0,0&quot;);&#10;        menu = new Menu();&#10;        panelBody = new JPanel(new BorderLayout());&#10;        panelBody.setBackground(java.awt.Color.WHITE);&#10;        // Thay đổi viền từ xám thành trắng hoặc loại bỏ hoàn toàn&#10;        panelBody.setBorder(null); // Loại bỏ viền xám&#10;        panelBody.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;background:#FFFFFF;&quot;&#10;                + &quot;border:0,0,0,0&quot;); // Loại bỏ viền&#10;        initMenuArrowIcon();&#10;        menuButton.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;background:#D3D3D3;&quot;&#10;                + &quot;arc:999;&quot;&#10;                + &quot;focusWidth:0;&quot;&#10;                + &quot;borderWidth:0;&quot;&#10;                + &quot;shadow:false&quot;);&#10;        menuButton.addActionListener((ActionEvent e) -&gt; {&#10;            setMenuFull(!menu.isMenuFull());&#10;        });&#10;//        initMenuEvent();&#10;        setLayer(menuButton, JLayeredPane.POPUP_LAYER);&#10;        add(menuButton);&#10;        add(menu);&#10;        add(panelBody);&#10;    }&#10;&#10;    @Override&#10;    public void applyComponentOrientation(ComponentOrientation o) {&#10;        super.applyComponentOrientation(o);&#10;        initMenuArrowIcon();&#10;    }&#10;&#10;    private void initMenuArrowIcon() {&#10;        if (menuButton == null) {&#10;            menuButton = new JButton();&#10;        }&#10;        String icon = (getComponentOrientation().isLeftToRight()) ? &quot;menu_left.svg&quot; : &quot;menu_right.svg&quot;;&#10;        FlatSVGIcon svgIcon = new FlatSVGIcon(&quot;icon/svg/&quot; + icon, 0.8f);&#10;        FlatSVGIcon.ColorFilter colorFilter = new FlatSVGIcon.ColorFilter();&#10;        // Icon màu đen&#10;        colorFilter.add(java.awt.Color.decode(&quot;#969696&quot;), java.awt.Color.BLACK);&#10;        svgIcon.setColorFilter(colorFilter);&#10;        menuButton.setIcon(svgIcon);&#10;    }&#10;&#10;//    private void initMenuEvent() {&#10;//        menu.addMenuEvent((int index, int subIndex, MenuAction action) -&gt; {&#10;//            // Application.mainForm.showForm(new DefaultForm(&quot;Form : &quot; + index + &quot; &quot; + subIndex));&#10;//            if (index == 0) {&#10;//                MenuForm.showForm(new FormDashboard());&#10;//            } else if (index == 1) {&#10;//                if (subIndex == 1) {&#10;//                    MenuForm.showForm(new FormInbox());&#10;//                } else if (subIndex == 2) {&#10;//                    MenuForm.showForm(new FormRead());&#10;//                } else {&#10;//                    action.cancel();&#10;//                }&#10;//            } else if (index == 9) {&#10;//                MenuForm.logout();&#10;//            } else {&#10;//                action.cancel();&#10;//            }&#10;//        });&#10;//    }&#10;    private void setMenuFull(boolean full) {&#10;        String icon;&#10;        if (getComponentOrientation().isLeftToRight()) {&#10;            icon = (full) ? &quot;menu_left.svg&quot; : &quot;menu_right.svg&quot;;&#10;        } else {&#10;            icon = (full) ? &quot;menu_right.svg&quot; : &quot;menu_left.svg&quot;;&#10;        }&#10;        FlatSVGIcon svgIcon = new FlatSVGIcon(&quot;icon/svg/&quot; + icon, 0.8f);&#10;        FlatSVGIcon.ColorFilter colorFilter = new FlatSVGIcon.ColorFilter();&#10;        // Icon màu đen&#10;        colorFilter.add(java.awt.Color.decode(&quot;#969696&quot;), java.awt.Color.BLACK);&#10;        svgIcon.setColorFilter(colorFilter);&#10;        menuButton.setIcon(svgIcon);&#10;        menu.setMenuFull(full);&#10;        revalidate();&#10;    }&#10;&#10;    public void hideMenu() {&#10;        menu.hideMenuItem();&#10;    }&#10;&#10;    public void showForm(Component component) {&#10;        panelBody.removeAll();&#10;        panelBody.add(component);&#10;        panelBody.repaint();&#10;        panelBody.revalidate();&#10;    }&#10;&#10;    public void setSelectedMenu(int index, int subIndex) {&#10;        menu.setSelectedMenu(index, subIndex);&#10;    }&#10;&#10;    private Menu menu;&#10;    private JPanel panelBody;&#10;    private JButton menuButton;&#10;&#10;    private class MainFormLayout implements LayoutManager {&#10;&#10;        @Override&#10;        public void addLayoutComponent(String name, Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public void removeLayoutComponent(Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public Dimension preferredLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(5, 5);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public Dimension minimumLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(0, 0);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void layoutContainer(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                boolean ltr = parent.getComponentOrientation().isLeftToRight();&#10;                Insets insets = UIScale.scale(parent.getInsets());&#10;                int x = insets.left;&#10;                int y = 0; // Menu bắt đầu từ y = 0 để tràn lên trên cùng&#10;                int width = parent.getWidth() - (insets.left + insets.right);&#10;                int height = parent.getHeight(); // Sử dụng toàn bộ chiều cao&#10;                int menuWidth = UIScale.scale(menu.isMenuFull() ? menu.getMenuMaxWidth() : menu.getMenuMinWidth());&#10;                int menuX = ltr ? x : x + width - menuWidth;&#10;                menu.setBounds(menuX, y, menuWidth, height); // Menu tràn từ trên xuống dưới&#10;&#10;                int menuButtonWidth = menuButton.getPreferredSize().width;&#10;                int menuButtonHeight = menuButton.getPreferredSize().height;&#10;                int menubX;&#10;                if (ltr) {&#10;                    menubX = (int) (x + menuWidth - (menuButtonWidth * (menu.isMenuFull() ? 0.5f : 0.3f)));&#10;                } else {&#10;                    menubX = (int) (menuX - (menuButtonWidth * (menu.isMenuFull() ? 0.5f : 0.7f)));&#10;                }&#10;                menuButton.setBounds(menubX, UIScale.scale(35), menuButtonWidth, menuButtonHeight); // Đặt button menu cách top 35px&#10;&#10;                int gap = UIScale.scale(5);&#10;                int bodyWidth = width - menuWidth - gap;&#10;                int bodyHeight = height - UIScale.scale(5);&#10;                int bodyx = ltr ? (x + menuWidth + gap) : x;&#10;                int bodyy = UIScale.scale(5);&#10;                panelBody.setBounds(bodyx, bodyy, bodyWidth, bodyHeight);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.form;&#10;&#10;import com.formdev.flatlaf.FlatClientProperties;&#10;import com.formdev.flatlaf.extras.FlatSVGIcon;&#10;import com.formdev.flatlaf.util.UIScale;&#10;import java.awt.BorderLayout;&#10;import java.awt.Component;&#10;import java.awt.ComponentOrientation;&#10;import java.awt.Container;&#10;import java.awt.Dimension;&#10;import java.awt.Insets;&#10;import java.awt.LayoutManager;&#10;import java.awt.event.ActionEvent;&#10;import javax.swing.JButton;&#10;import javax.swing.JLayeredPane;&#10;import javax.swing.JPanel;&#10;import javax.swing.border.EmptyBorder;&#10;import vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.form.other.FormInbox;&#10;import vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.form.other.FormRead;&#10;import vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.menu.Menu;&#10;&#10;/**&#10; *&#10; * @author PhamTra&#10; */&#10;public class MainForm extends JLayeredPane {&#10;&#10;    public MainForm() {&#10;        init();&#10;    }&#10;&#10;    private void init() {&#10;        setBorder(new EmptyBorder(0, 0, 0, 0));&#10;        setLayout(new MainFormLayout());&#10;        setBackground(java.awt.Color.WHITE);&#10;        putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;background:#FFFFFF;&quot;&#10;                + &quot;border:0,0,0,0&quot;);&#10;        menu = new Menu();&#10;        panelBody = new JPanel(new BorderLayout());&#10;        panelBody.setBackground(java.awt.Color.WHITE);&#10;        // Thay đổi viền từ xám thành trắng hoặc loại bỏ hoàn toàn&#10;        panelBody.setBorder(null); // Loại bỏ viền xám&#10;        panelBody.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;background:#FFFFFF;&quot;&#10;                + &quot;border:0,0,0,0&quot;); // Loại bỏ viền&#10;        initMenuArrowIcon();&#10;        menuButton.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;background:#D3D3D3;&quot;&#10;                + &quot;arc:999;&quot;&#10;                + &quot;focusWidth:0;&quot;&#10;                + &quot;borderWidth:0;&quot;&#10;                + &quot;shadow:false&quot;);&#10;        menuButton.addActionListener((ActionEvent e) -&gt; {&#10;            setMenuFull(!menu.isMenuFull());&#10;        });&#10;//        initMenuEvent();&#10;        setLayer(menuButton, JLayeredPane.POPUP_LAYER);&#10;        add(menuButton);&#10;        add(menu);&#10;        add(panelBody);&#10;    }&#10;&#10;    @Override&#10;    public void applyComponentOrientation(ComponentOrientation o) {&#10;        super.applyComponentOrientation(o);&#10;        initMenuArrowIcon();&#10;    }&#10;&#10;    private void initMenuArrowIcon() {&#10;        if (menuButton == null) {&#10;            menuButton = new JButton();&#10;        }&#10;        String icon = (getComponentOrientation().isLeftToRight()) ? &quot;menu_left.svg&quot; : &quot;menu_right.svg&quot;;&#10;        FlatSVGIcon svgIcon = new FlatSVGIcon(&quot;icon/svg/&quot; + icon, 0.8f);&#10;        FlatSVGIcon.ColorFilter colorFilter = new FlatSVGIcon.ColorFilter();&#10;        // Icon màu đen&#10;        colorFilter.add(java.awt.Color.decode(&quot;#969696&quot;), java.awt.Color.BLACK);&#10;        svgIcon.setColorFilter(colorFilter);&#10;        menuButton.setIcon(svgIcon);&#10;    }&#10;&#10;//    private void initMenuEvent() {&#10;//        menu.addMenuEvent((int index, int subIndex, MenuAction action) -&gt; {&#10;//            // Application.mainForm.showForm(new DefaultForm(&quot;Form : &quot; + index + &quot; &quot; + subIndex));&#10;//            if (index == 0) {&#10;//                MenuForm.showForm(new FormDashboard());&#10;//            } else if (index == 1) {&#10;//                if (subIndex == 1) {&#10;//                    MenuForm.showForm(new FormInbox());&#10;//                } else if (subIndex == 2) {&#10;//                    MenuForm.showForm(new FormRead());&#10;//                } else {&#10;//                    action.cancel();&#10;//                }&#10;//            } else if (index == 9) {&#10;//                MenuForm.logout();&#10;//            } else {&#10;//                action.cancel();&#10;//            }&#10;//        });&#10;//    }&#10;    private void setMenuFull(boolean full) {&#10;        String icon;&#10;        if (getComponentOrientation().isLeftToRight()) {&#10;            icon = (full) ? &quot;menu_left.svg&quot; : &quot;menu_right.svg&quot;;&#10;        } else {&#10;            icon = (full) ? &quot;menu_right.svg&quot; : &quot;menu_left.svg&quot;;&#10;        }&#10;        FlatSVGIcon svgIcon = new FlatSVGIcon(&quot;icon/svg/&quot; + icon, 0.8f);&#10;        FlatSVGIcon.ColorFilter colorFilter = new FlatSVGIcon.ColorFilter();&#10;        // Icon màu đen&#10;        colorFilter.add(java.awt.Color.decode(&quot;#969696&quot;), java.awt.Color.BLACK);&#10;        svgIcon.setColorFilter(colorFilter);&#10;        menuButton.setIcon(svgIcon);&#10;        menu.setMenuFull(full);&#10;        revalidate();&#10;    }&#10;&#10;    public void hideMenu() {&#10;        menu.hideMenuItem();&#10;    }&#10;&#10;    public void showForm(Component component) {&#10;        panelBody.removeAll();&#10;        panelBody.add(component);&#10;        panelBody.repaint();&#10;        panelBody.revalidate();&#10;    }&#10;&#10;    public void setSelectedMenu(int index, int subIndex) {&#10;        menu.setSelectedMenu(index, subIndex);&#10;    }&#10;&#10;    private Menu menu;&#10;    private JPanel panelBody;&#10;    private JButton menuButton;&#10;&#10;    private class MainFormLayout implements LayoutManager {&#10;&#10;        @Override&#10;        public void addLayoutComponent(String name, Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public void removeLayoutComponent(Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public Dimension preferredLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(5, 5);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public Dimension minimumLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(0, 0);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void layoutContainer(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                boolean ltr = parent.getComponentOrientation().isLeftToRight();&#10;                Insets insets = UIScale.scale(parent.getInsets());&#10;                int x = insets.left;&#10;                int y = 0; // Menu bắt đầu từ y = 0 để tràn lên trên cùng&#10;                int width = parent.getWidth() - (insets.left + insets.right);&#10;                int height = parent.getHeight(); // Sử dụng toàn bộ chiều cao&#10;                int menuWidth = UIScale.scale(menu.isMenuFull() ? menu.getMenuMaxWidth() : menu.getMenuMinWidth()) + UIScale.scale(20); // Tăng width để chứa margin&#10;                int menuX = ltr ? x : x + width - menuWidth;&#10;                menu.setBounds(menuX, y, menuWidth, height); // Menu tràn từ trên xuống dưới&#10;&#10;                int menuButtonWidth = menuButton.getPreferredSize().width;&#10;                int menuButtonHeight = menuButton.getPreferredSize().height;&#10;                int menubX;&#10;                if (ltr) {&#10;                    menubX = (int) (x + menuWidth - (menuButtonWidth * (menu.isMenuFull() ? 0.5f : 0.3f))) - UIScale.scale(10); // Điều chỉnh vị trí button&#10;                } else {&#10;                    menubX = (int) (menuX - (menuButtonWidth * (menu.isMenuFull() ? 0.5f : 0.7f))) + UIScale.scale(10);&#10;                }&#10;                menuButton.setBounds(menubX, UIScale.scale(35), menuButtonWidth, menuButtonHeight); // Đặt button menu cách top 35px&#10;&#10;                int gap = UIScale.scale(5);&#10;                int bodyWidth = width - menuWidth - gap;&#10;                int bodyHeight = height - UIScale.scale(5);&#10;                int bodyx = ltr ? (x + menuWidth + gap) : x;&#10;                int bodyy = UIScale.scale(5);&#10;                panelBody.setBounds(bodyx, bodyy, bodyWidth, bodyHeight);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/vn/edu/iuh/fit/iuhpharmacitymanagement/gui/staff/menu/Menu.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/vn/edu/iuh/fit/iuhpharmacitymanagement/gui/staff/menu/Menu.java" />
              <option name="originalContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.menu;&#10;&#10;import com.formdev.flatlaf.FlatClientProperties;&#10;import com.formdev.flatlaf.extras.FlatSVGIcon;&#10;import com.formdev.flatlaf.ui.FlatUIUtils;&#10;import com.formdev.flatlaf.util.UIScale;&#10;import java.awt.Component;&#10;import java.awt.Container;&#10;import java.awt.Dimension;&#10;import java.awt.Insets;&#10;import java.awt.LayoutManager;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import javax.swing.ImageIcon;&#10;import javax.swing.JLabel;&#10;import javax.swing.JPanel;&#10;import javax.swing.JScrollBar;&#10;import javax.swing.JScrollPane;&#10;&#10;/**&#10; *&#10; * @author PhamTra&#10; */&#10;public class Menu extends JPanel {&#10;&#10;    private final String menuItems[][] = {&#10;        {&quot;~MAIN~&quot;},&#10;        {&quot;Dashboard&quot;},&#10;        {&quot;~MENU~&quot;},&#10;        {&quot;1&quot;, &quot;1.1&quot;, &quot;1.2&quot;, &quot;1.3&quot;},&#10;        {&quot;2&quot;},&#10;        {&quot;3&quot;},&#10;        {&quot;~QUẢN LÝ~&quot;},&#10;        {&quot;Quản lý khách hàng&quot;, &quot;4.1&quot;, &quot;4.2&quot;, &quot;4.3&quot;, &quot;4.4&quot;},&#10;        {&quot;5&quot;, &quot;5.1&quot;, &quot;5.2&quot;, &quot;5.3&quot;, &quot;5.4&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;~BÁO CÁO~&quot;},&#10;        {&quot;6&quot;, &quot;6.1&quot;, &quot;6.2&quot;, &quot;6.3&quot;, &quot;6.4&quot;},&#10;        {&quot;7&quot;, &quot;7.1&quot;, &quot;7.2&quot;, &quot;7.3&quot;},&#10;        {&quot;8&quot;, &quot;8.1&quot;, &quot;8.2&quot;, &quot;8.3&quot;, &quot;8.4&quot;, &quot;8.5&quot;, &quot;8.6&quot;, &quot;8.7&quot;},&#10;        {&quot;Logout&quot;}&#10;    };&#10;&#10;    public boolean isMenuFull() {&#10;        return menuFull;&#10;    }&#10;&#10;    public void setMenuFull(boolean menuFull) {&#10;        this.menuFull = menuFull;&#10;        if (menuFull) {&#10;            header.setText(headerName);&#10;            header.setHorizontalAlignment(getComponentOrientation().isLeftToRight() ? JLabel.LEFT : JLabel.RIGHT);&#10;        } else {&#10;            header.setText(&quot;&quot;);&#10;            header.setHorizontalAlignment(JLabel.CENTER);&#10;        }&#10;        // Đảm bảo header luôn màu trắng&#10;        header.setForeground(java.awt.Color.WHITE);&#10;&#10;        for (Component com : panelMenu.getComponents()) {&#10;            if (com instanceof MenuItem) {&#10;                ((MenuItem) com).setFull(menuFull);&#10;            }&#10;        }&#10;    }&#10;&#10;    private final List&lt;MenuEvent&gt; events = new ArrayList&lt;&gt;();&#10;    private boolean menuFull = true;&#10;    private final String headerName = &quot;IUH PHARMACITY&quot;;&#10;&#10;    protected final boolean hideMenuTitleOnMinimum = true;&#10;    protected final int menuTitleLeftInset = 5;&#10;    protected final int menuTitleVgap = 5;&#10;    protected final int menuMaxWidth = 300; // Tăng từ 250 lên 300&#10;    protected final int menuMinWidth = 80; // Tăng từ 60 lên 80&#10;    protected final int headerFullHgap = 5;&#10;&#10;    public Menu() {&#10;        init();&#10;    }&#10;&#10;    private void init() {&#10;        setLayout(new MenuLayout());&#10;        // Đặt màu nền cố định cho menu - sửa màu để nhất quán&#10;        setBackground(java.awt.Color.decode(&quot;#00385C&quot;));&#10;        putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;border:0,0,0,0;&quot; // Loại bỏ tất cả border để menu có thể tràn lên trên&#10;                + &quot;background:#00385C;&quot; // Sửa màu từ #1E3A5F thành #00385C&#10;                + &quot;arc:0,0,15,15;&quot; // Chỉ bo góc dưới đẹp hơn&#10;                + &quot;shadow:false&quot;); // Loại bỏ shadow&#10;        header = new JLabel(headerName);&#10;        // Tạm thời bỏ icon để tránh lỗi&#10;        header.setForeground(java.awt.Color.WHITE);&#10;        header.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;font:$Menu.header.font;&quot;&#10;                + &quot;foreground:#FFFFFF&quot;);&#10;&#10;        //  Menu&#10;        scroll = new JScrollPane();&#10;        panelMenu = new JPanel(new MenuItemLayout(this));&#10;        panelMenu.setBackground(java.awt.Color.decode(&quot;#00385C&quot;));&#10;        panelMenu.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;border:2,2,2,2;&quot; // Giảm padding&#10;                + &quot;background:#00385C&quot;);&#10;&#10;        scroll.setViewportView(panelMenu);&#10;        scroll.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;border:null;&quot;&#10;                + &quot;shadow:false&quot;); // Loại bỏ shadow cho scroll&#10;        JScrollBar vscroll = scroll.getVerticalScrollBar();&#10;        vscroll.setUnitIncrement(10);&#10;        // Loại bỏ styling để tránh lỗi với Java 24&#10;        // vscroll.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;);&#10;        createMenu();&#10;        add(header);&#10;        add(scroll);&#10;    }&#10;&#10;    private void createMenu() {&#10;        int index = 0;&#10;        for (int i = 0; i &lt; menuItems.length; i++) {&#10;            String menuName = menuItems[i][0];&#10;            if (menuName.startsWith(&quot;~&quot;) &amp;&amp; menuName.endsWith(&quot;~&quot;)) {&#10;                panelMenu.add(createTitle(menuName));&#10;            } else {&#10;                MenuItem menuItem = new MenuItem(this, menuItems[i], index++, events);&#10;                panelMenu.add(menuItem);&#10;            }&#10;        }&#10;        // các icon trong menu ghi theo dạng [số]+[tên] cho dễ chia&#10;        // vd: 1-hehe, không ghi 01&#10;        // icon tải về dùng đuôi svg để đỡ sửa lại w và h&#10;    }&#10;&#10;    private JLabel createTitle(String title) {&#10;        String menuName = title.substring(1, title.length() - 1);&#10;        JLabel lbTitle = new JLabel(menuName);&#10;        // Đặt màu trắng cố định cho tiêu đề&#10;        lbTitle.setForeground(java.awt.Color.WHITE);&#10;        lbTitle.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;font:$Menu.label.font;&quot;&#10;                + &quot;foreground:#FFFFFF&quot;);&#10;        return lbTitle;&#10;    }&#10;&#10;    public void setSelectedMenu(int index, int subIndex) {&#10;        runEvent(index, subIndex);&#10;    }&#10;&#10;    protected void setSelected(int index, int subIndex) {&#10;        int size = panelMenu.getComponentCount();&#10;        for (int i = 0; i &lt; size; i++) {&#10;            Component com = panelMenu.getComponent(i);&#10;            if (com instanceof MenuItem) {&#10;                MenuItem item = (MenuItem) com;&#10;                if (item.getMenuIndex() == index) {&#10;                    item.setSelectedIndex(subIndex);&#10;                } else {&#10;                    item.setSelectedIndex(-1);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    protected void runEvent(int index, int subIndex) {&#10;        MenuAction menuAction = new MenuAction();&#10;        for (MenuEvent event : events) {&#10;            event.menuSelected(index, subIndex, menuAction);&#10;        }&#10;        if (!menuAction.isCancel()) {&#10;            setSelected(index, subIndex);&#10;        }&#10;    }&#10;&#10;    public void addMenuEvent(MenuEvent event) {&#10;        events.add(event);&#10;    }&#10;&#10;    public void hideMenuItem() {&#10;        for (Component com : panelMenu.getComponents()) {&#10;            if (com instanceof MenuItem) {&#10;                ((MenuItem) com).hideMenuItem();&#10;            }&#10;        }&#10;        revalidate();&#10;    }&#10;&#10;    public boolean isHideMenuTitleOnMinimum() {&#10;        return hideMenuTitleOnMinimum;&#10;    }&#10;&#10;    public int getMenuTitleLeftInset() {&#10;        return menuTitleLeftInset;&#10;    }&#10;&#10;    public int getMenuTitleVgap() {&#10;        return menuTitleVgap;&#10;    }&#10;&#10;    public int getMenuMaxWidth() {&#10;        return menuMaxWidth;&#10;    }&#10;&#10;    public int getMenuMinWidth() {&#10;        return menuMinWidth;&#10;    }&#10;&#10;    private JLabel header;&#10;    private JScrollPane scroll;&#10;    private JPanel panelMenu;&#10;&#10;    private class MenuLayout implements LayoutManager {&#10;&#10;        @Override&#10;        public void addLayoutComponent(String name, Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public void removeLayoutComponent(Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public Dimension preferredLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(5, 5);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public Dimension minimumLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(0, 0);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void layoutContainer(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                Insets insets = parent.getInsets();&#10;                int x = insets.left;&#10;                int y = UIScale.scale(30); // Bắt đầu từ 30px để tránh chạm các nút điều khiển cửa sổ&#10;                int gap = UIScale.scale(3); // Giảm gap&#10;                int sheaderFullHgap = UIScale.scale(headerFullHgap);&#10;                int width = parent.getWidth() - (insets.left + insets.right);&#10;                int height = parent.getHeight() - y - insets.bottom; // Điều chỉnh chiều cao&#10;                int iconWidth = width;&#10;                int iconHeight = header.getPreferredSize().height;&#10;                int hgap = menuFull ? sheaderFullHgap : 0;&#10;&#10;                header.setBounds(x + hgap, y, iconWidth - (hgap * 2), iconHeight);&#10;&#10;                int menux = x;&#10;                int menuy = y + iconHeight + gap;&#10;                int menuWidth = width;&#10;                int menuHeight = height - (iconHeight + gap);&#10;                scroll.setBounds(menux, menuy, menuWidth, menuHeight);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.menu;&#10;&#10;import com.formdev.flatlaf.FlatClientProperties;&#10;import com.formdev.flatlaf.extras.FlatSVGIcon;&#10;import com.formdev.flatlaf.ui.FlatUIUtils;&#10;import com.formdev.flatlaf.util.UIScale;&#10;import java.awt.Component;&#10;import java.awt.Container;&#10;import java.awt.Dimension;&#10;import java.awt.Insets;&#10;import java.awt.LayoutManager;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import javax.swing.ImageIcon;&#10;import javax.swing.JLabel;&#10;import javax.swing.JPanel;&#10;import javax.swing.JScrollBar;&#10;import javax.swing.JScrollPane;&#10;&#10;/**&#10; *&#10; * @author PhamTra&#10; */&#10;public class Menu extends JPanel {&#10;&#10;    private final String menuItems[][] = {&#10;        {&quot;~MAIN~&quot;},&#10;        {&quot;Dashboard&quot;},&#10;        {&quot;~MENU~&quot;},&#10;        {&quot;1&quot;, &quot;1.1&quot;, &quot;1.2&quot;, &quot;1.3&quot;},&#10;        {&quot;2&quot;},&#10;        {&quot;3&quot;},&#10;        {&quot;~QUẢN LÝ~&quot;},&#10;        {&quot;Quản lý khách hàng&quot;, &quot;4.1&quot;, &quot;4.2&quot;, &quot;4.3&quot;, &quot;4.4&quot;},&#10;        {&quot;5&quot;, &quot;5.1&quot;, &quot;5.2&quot;, &quot;5.3&quot;, &quot;5.4&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;~BÁO CÁO~&quot;},&#10;        {&quot;6&quot;, &quot;6.1&quot;, &quot;6.2&quot;, &quot;6.3&quot;, &quot;6.4&quot;},&#10;        {&quot;7&quot;, &quot;7.1&quot;, &quot;7.2&quot;, &quot;7.3&quot;},&#10;        {&quot;8&quot;, &quot;8.1&quot;, &quot;8.2&quot;, &quot;8.3&quot;, &quot;8.4&quot;, &quot;8.5&quot;, &quot;8.6&quot;, &quot;8.7&quot;},&#10;        {&quot;Logout&quot;}&#10;    };&#10;&#10;    public boolean isMenuFull() {&#10;        return menuFull;&#10;    }&#10;&#10;    public void setMenuFull(boolean menuFull) {&#10;        this.menuFull = menuFull;&#10;        if (menuFull) {&#10;            header.setText(headerName);&#10;            header.setHorizontalAlignment(getComponentOrientation().isLeftToRight() ? JLabel.LEFT : JLabel.RIGHT);&#10;        } else {&#10;            header.setText(&quot;&quot;);&#10;            header.setHorizontalAlignment(JLabel.CENTER);&#10;        }&#10;        // Đảm bảo header luôn màu trắng&#10;        header.setForeground(java.awt.Color.WHITE);&#10;&#10;        for (Component com : panelMenu.getComponents()) {&#10;            if (com instanceof MenuItem) {&#10;                ((MenuItem) com).setFull(menuFull);&#10;            }&#10;        }&#10;    }&#10;&#10;    private final List&lt;MenuEvent&gt; events = new ArrayList&lt;&gt;();&#10;    private boolean menuFull = true;&#10;    private final String headerName = &quot;IUH PHARMACITY&quot;;&#10;&#10;    protected final boolean hideMenuTitleOnMinimum = true;&#10;    protected final int menuTitleLeftInset = 5;&#10;    protected final int menuTitleVgap = 5;&#10;    protected final int menuMaxWidth = 300; // Tăng từ 250 lên 300&#10;    protected final int menuMinWidth = 80; // Tăng từ 60 lên 80&#10;    protected final int headerFullHgap = 5;&#10;&#10;    public Menu() {&#10;        init();&#10;    }&#10;&#10;    private void init() {&#10;        setLayout(new MenuLayout());&#10;        // Đặt màu nền cố định cho menu - sửa màu để nhất quán&#10;        setBackground(java.awt.Color.decode(&quot;#00385C&quot;));&#10;        putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;border:0,0,0,0;&quot; // Loại bỏ tất cả border để menu có thể tràn lên trên&#10;                + &quot;background:#00385C;&quot; // Sửa màu từ #1E3A5F thành #00385C&#10;                + &quot;arc:0,20,20,0;&quot; // Bo góc phải trên và phải dưới&#10;                + &quot;shadow:false&quot;); // Loại bỏ shadow&#10;        header = new JLabel(headerName);&#10;        // Tạm thời bỏ icon để tránh lỗi&#10;        header.setForeground(java.awt.Color.WHITE);&#10;        header.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;font:$Menu.header.font;&quot;&#10;                + &quot;foreground:#FFFFFF&quot;);&#10;&#10;        //  Menu&#10;        scroll = new JScrollPane();&#10;        panelMenu = new JPanel(new MenuItemLayout(this));&#10;        panelMenu.setBackground(java.awt.Color.decode(&quot;#00385C&quot;));&#10;        panelMenu.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;border:2,2,2,2;&quot; // Giảm padding&#10;                + &quot;background:#00385C&quot;);&#10;&#10;        scroll.setViewportView(panelMenu);&#10;        scroll.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;border:null;&quot;&#10;                + &quot;shadow:false&quot;); // Loại bỏ shadow cho scroll&#10;        JScrollBar vscroll = scroll.getVerticalScrollBar();&#10;        vscroll.setUnitIncrement(10);&#10;        // Loại bỏ styling để tránh lỗi với Java 24&#10;        // vscroll.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;);&#10;        createMenu();&#10;        add(header);&#10;        add(scroll);&#10;    }&#10;&#10;    private void createMenu() {&#10;        int index = 0;&#10;        for (int i = 0; i &lt; menuItems.length; i++) {&#10;            String menuName = menuItems[i][0];&#10;            if (menuName.startsWith(&quot;~&quot;) &amp;&amp; menuName.endsWith(&quot;~&quot;)) {&#10;                panelMenu.add(createTitle(menuName));&#10;            } else {&#10;                MenuItem menuItem = new MenuItem(this, menuItems[i], index++, events);&#10;                panelMenu.add(menuItem);&#10;            }&#10;        }&#10;        // các icon trong menu ghi theo dạng [số]+[tên] cho dễ chia&#10;        // vd: 1-hehe, không ghi 01&#10;        // icon tải về dùng đuôi svg để đỡ sửa lại w và h&#10;    }&#10;&#10;    private JLabel createTitle(String title) {&#10;        String menuName = title.substring(1, title.length() - 1);&#10;        JLabel lbTitle = new JLabel(menuName);&#10;        // Đặt màu trắng cố định cho tiêu đề&#10;        lbTitle.setForeground(java.awt.Color.WHITE);&#10;        lbTitle.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;font:$Menu.label.font;&quot;&#10;                + &quot;foreground:#FFFFFF&quot;);&#10;        return lbTitle;&#10;    }&#10;&#10;    public void setSelectedMenu(int index, int subIndex) {&#10;        runEvent(index, subIndex);&#10;    }&#10;&#10;    protected void setSelected(int index, int subIndex) {&#10;        int size = panelMenu.getComponentCount();&#10;        for (int i = 0; i &lt; size; i++) {&#10;            Component com = panelMenu.getComponent(i);&#10;            if (com instanceof MenuItem) {&#10;                MenuItem item = (MenuItem) com;&#10;                if (item.getMenuIndex() == index) {&#10;                    item.setSelectedIndex(subIndex);&#10;                } else {&#10;                    item.setSelectedIndex(-1);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    protected void runEvent(int index, int subIndex) {&#10;        MenuAction menuAction = new MenuAction();&#10;        for (MenuEvent event : events) {&#10;            event.menuSelected(index, subIndex, menuAction);&#10;        }&#10;        if (!menuAction.isCancel()) {&#10;            setSelected(index, subIndex);&#10;        }&#10;    }&#10;&#10;    public void addMenuEvent(MenuEvent event) {&#10;        events.add(event);&#10;    }&#10;&#10;    public void hideMenuItem() {&#10;        for (Component com : panelMenu.getComponents()) {&#10;            if (com instanceof MenuItem) {&#10;                ((MenuItem) com).hideMenuItem();&#10;            }&#10;        }&#10;        revalidate();&#10;    }&#10;&#10;    public boolean isHideMenuTitleOnMinimum() {&#10;        return hideMenuTitleOnMinimum;&#10;    }&#10;&#10;    public int getMenuTitleLeftInset() {&#10;        return menuTitleLeftInset;&#10;    }&#10;&#10;    public int getMenuTitleVgap() {&#10;        return menuTitleVgap;&#10;    }&#10;&#10;    public int getMenuMaxWidth() {&#10;        return menuMaxWidth;&#10;    }&#10;&#10;    public int getMenuMinWidth() {&#10;        return menuMinWidth;&#10;    }&#10;&#10;    private JLabel header;&#10;    private JScrollPane scroll;&#10;    private JPanel panelMenu;&#10;&#10;    private class MenuLayout implements LayoutManager {&#10;&#10;        @Override&#10;        public void addLayoutComponent(String name, Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public void removeLayoutComponent(Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public Dimension preferredLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(5, 5);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public Dimension minimumLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(0, 0);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void layoutContainer(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                Insets insets = parent.getInsets();&#10;                int x = insets.left + UIScale.scale(10); // Dịch vào trong 10px&#10;                int y = UIScale.scale(30); // Bắt đầu từ 30px để tránh chạm các nút điều khiển cửa sổ&#10;                int gap = UIScale.scale(3); // Giảm gap&#10;                int sheaderFullHgap = UIScale.scale(headerFullHgap);&#10;                int width = parent.getWidth() - (insets.left + insets.right) - UIScale.scale(20); // Giảm width để có margin 2 bên&#10;                int height = parent.getHeight() - y - insets.bottom - UIScale.scale(10); // Giảm height để có margin dưới&#10;                int iconWidth = width;&#10;                int iconHeight = header.getPreferredSize().height;&#10;                int hgap = menuFull ? sheaderFullHgap : 0;&#10;&#10;                header.setBounds(x + hgap, y, iconWidth - (hgap * 2), iconHeight);&#10;&#10;                int menux = x;&#10;                int menuy = y + iconHeight + gap;&#10;                int menuWidth = width;&#10;                int menuHeight = height - (iconHeight + gap);&#10;                scroll.setBounds(menux, menuy, menuWidth, menuHeight);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>