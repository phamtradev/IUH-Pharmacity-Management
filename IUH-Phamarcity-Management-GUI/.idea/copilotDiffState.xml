<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/vn/edu/iuh/fit/iuhpharmacitymanagement/gui/application/menu/Menu.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/vn/edu/iuh/fit/iuhpharmacitymanagement/gui/application/menu/Menu.java" />
              <option name="originalContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package vn.edu.iuh.fit.iuhpharmacitymanagement.gui.application.menu;&#10;&#10;import com.formdev.flatlaf.FlatClientProperties;&#10;import com.formdev.flatlaf.util.UIScale;&#10;import java.awt.Component;&#10;import java.awt.Container;&#10;import java.awt.Dimension;&#10;import java.awt.Insets;&#10;import java.awt.LayoutManager;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import javax.swing.JLabel;&#10;import javax.swing.JPanel;&#10;import javax.swing.JScrollBar;&#10;import javax.swing.JScrollPane;&#10;&#10;/**&#10; *&#10; * @author PhamTra&#10; */&#10;public class Menu extends JPanel {&#10;&#10;    private final String menuItems[][] = {&#10;        {&quot;~MAIN~&quot;},&#10;        {&quot;Dashboard&quot;},&#10;        {&quot;~MENU~&quot;},&#10;        {&quot;1&quot;, &quot;1.1&quot;, &quot;1.2&quot;, &quot;1.3&quot;},&#10;        {&quot;2&quot;},&#10;        {&quot;3&quot;},&#10;        {&quot;~QUẢN LÝ~&quot;},&#10;        {&quot;Quản lý khách hàng&quot;, &quot;4.1&quot;, &quot;4.2&quot;, &quot;4.3&quot;, &quot;4.4&quot;},&#10;        {&quot;5&quot;, &quot;5.1&quot;, &quot;5.2&quot;, &quot;5.3&quot;, &quot;5.4&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;~BÁO CÁO~&quot;},&#10;        {&quot;6&quot;, &quot;6.1&quot;, &quot;6.2&quot;, &quot;6.3&quot;, &quot;6.4&quot;},&#10;        {&quot;7&quot;, &quot;7.1&quot;, &quot;7.2&quot;, &quot;7.3&quot;},&#10;        {&quot;8&quot;, &quot;8.1&quot;, &quot;8.2&quot;, &quot;8.3&quot;, &quot;8.4&quot;, &quot;8.5&quot;, &quot;8.6&quot;, &quot;8.7&quot;},&#10;        {&quot;Logout&quot;}&#10;    };&#10;&#10;    public boolean isMenuFull() {&#10;        return menuFull;&#10;    }&#10;&#10;    public void setMenuFull(boolean menuFull) {&#10;        this.menuFull = menuFull;&#10;        if (menuFull) {&#10;            header.setText(headerName);&#10;            header.setHorizontalAlignment(getComponentOrientation().isLeftToRight() ? JLabel.LEFT : JLabel.RIGHT);&#10;        } else {&#10;            header.setText(&quot;&quot;);&#10;            header.setHorizontalAlignment(JLabel.CENTER);&#10;        }&#10;        // Đảm bảo header luôn màu trắng&#10;        header.setForeground(java.awt.Color.WHITE);&#10;&#10;        for (Component com : panelMenu.getComponents()) {&#10;            if (com instanceof MenuItem) {&#10;                ((MenuItem) com).setFull(menuFull);&#10;            }&#10;        }&#10;    }&#10;&#10;    private final List&lt;MenuEvent&gt; events = new ArrayList&lt;&gt;();&#10;    private boolean menuFull = true;&#10;    private final String headerName = &quot;IUH PHARMACITY&quot;;&#10;&#10;    protected final boolean hideMenuTitleOnMinimum = true;&#10;    protected final int menuTitleLeftInset = 5;&#10;    protected final int menuTitleVgap = 5;&#10;    protected final int menuMaxWidth = 300; // Tăng từ 250 lên 300&#10;    protected final int menuMinWidth = 80; // Tăng từ 60 lên 80&#10;    protected final int headerFullHgap = 5;&#10;&#10;    public Menu() {&#10;        init();&#10;    }&#10;&#10;    private void init() {&#10;        setLayout(new MenuLayout());&#10;        // Đặt màu nền cố định cho menu&#10;        setBackground(java.awt.Color.decode(&quot;#00385C&quot;));&#10;        putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;border:0,0,0,0;&quot; // Loại bỏ tất cả border để menu có thể tràn lên trên&#10;                + &quot;background:#00385C;&quot;&#10;                + &quot;arc:0,0,10,10&quot;); // Chỉ bo góc dưới nhẹ&#10;        header = new JLabel(headerName);&#10;        // Ẩn header bằng cách đặt visible = false&#10;        header.setVisible(false);&#10;        header.setForeground(java.awt.Color.WHITE);&#10;        header.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;font:$Menu.header.font;&quot;&#10;                + &quot;foreground:#FFFFFF&quot;);&#10;&#10;        //  Menu&#10;        scroll = new JScrollPane();&#10;        panelMenu = new JPanel(new MenuItemLayout(this));&#10;        panelMenu.setBackground(java.awt.Color.decode(&quot;#00385C&quot;));&#10;        panelMenu.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;border:2,2,2,2;&quot; // Giảm padding&#10;                + &quot;background:#00385C&quot;);&#10;&#10;        scroll.setViewportView(panelMenu);&#10;        scroll.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;border:null&quot;);&#10;        JScrollBar vscroll = scroll.getVerticalScrollBar();&#10;        vscroll.setUnitIncrement(10);&#10;        // Loại bỏ styling để tránh lỗi với Java 24&#10;        // vscroll.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;);&#10;        createMenu();&#10;        add(header);&#10;        add(scroll);&#10;    }&#10;&#10;    private void createMenu() {&#10;        int index = 0;&#10;        for (int i = 0; i &lt; menuItems.length; i++) {&#10;            String menuName = menuItems[i][0];&#10;            if (menuName.startsWith(&quot;~&quot;) &amp;&amp; menuName.endsWith(&quot;~&quot;)) {&#10;                panelMenu.add(createTitle(menuName));&#10;            } else {&#10;                MenuItem menuItem = new MenuItem(this, menuItems[i], index++, events);&#10;                panelMenu.add(menuItem);&#10;            }&#10;        }&#10;        // các icon trong menu ghi theo dạng [số]+[tên] cho dễ chia&#10;        // vd: 1-hehe, không ghi 01&#10;        // icon tải về dùng đuôi svg để đỡ sửa lại w và h&#10;    }&#10;&#10;    private JLabel createTitle(String title) {&#10;        String menuName = title.substring(1, title.length() - 1);&#10;        JLabel lbTitle = new JLabel(menuName);&#10;        // Đặt màu trắng cố định cho tiêu đề&#10;        lbTitle.setForeground(java.awt.Color.WHITE);&#10;        lbTitle.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;font:$Menu.label.font;&quot;&#10;                + &quot;foreground:#FFFFFF&quot;);&#10;        return lbTitle;&#10;    }&#10;&#10;    public void setSelectedMenu(int index, int subIndex) {&#10;        runEvent(index, subIndex);&#10;    }&#10;&#10;    protected void setSelected(int index, int subIndex) {&#10;        int size = panelMenu.getComponentCount();&#10;        for (int i = 0; i &lt; size; i++) {&#10;            Component com = panelMenu.getComponent(i);&#10;            if (com instanceof MenuItem) {&#10;                MenuItem item = (MenuItem) com;&#10;                if (item.getMenuIndex() == index) {&#10;                    item.setSelectedIndex(subIndex);&#10;                } else {&#10;                    item.setSelectedIndex(-1);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    protected void runEvent(int index, int subIndex) {&#10;        MenuAction menuAction = new MenuAction();&#10;        for (MenuEvent event : events) {&#10;            event.menuSelected(index, subIndex, menuAction);&#10;        }&#10;        if (!menuAction.isCancel()) {&#10;            setSelected(index, subIndex);&#10;        }&#10;    }&#10;&#10;    public void addMenuEvent(MenuEvent event) {&#10;        events.add(event);&#10;    }&#10;&#10;    public void hideMenuItem() {&#10;        for (Component com : panelMenu.getComponents()) {&#10;            if (com instanceof MenuItem) {&#10;                ((MenuItem) com).hideMenuItem();&#10;            }&#10;        }&#10;        revalidate();&#10;    }&#10;&#10;    public boolean isHideMenuTitleOnMinimum() {&#10;        return hideMenuTitleOnMinimum;&#10;    }&#10;&#10;    public int getMenuTitleLeftInset() {&#10;        return menuTitleLeftInset;&#10;    }&#10;&#10;    public int getMenuTitleVgap() {&#10;        return menuTitleVgap;&#10;    }&#10;&#10;    public int getMenuMaxWidth() {&#10;        return menuMaxWidth;&#10;    }&#10;&#10;    public int getMenuMinWidth() {&#10;        return menuMinWidth;&#10;    }&#10;&#10;    private JLabel header;&#10;    private JScrollPane scroll;&#10;    private JPanel panelMenu;&#10;&#10;    private class MenuLayout implements LayoutManager {&#10;&#10;        @Override&#10;        public void addLayoutComponent(String name, Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public void removeLayoutComponent(Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public Dimension preferredLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(5, 5);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public Dimension minimumLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(0, 0);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void layoutContainer(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                Insets insets = parent.getInsets();&#10;                int x = insets.left;&#10;                int y = UIScale.scale(5); // Bắt đầu từ 5px vì header bị ẩn&#10;                int gap = UIScale.scale(3); // Giảm gap&#10;                int sheaderFullHgap = UIScale.scale(headerFullHgap);&#10;                int width = parent.getWidth() - (insets.left + insets.right);&#10;                int height = parent.getHeight() - y - insets.bottom; // Điều chỉnh chiều cao&#10;                int iconWidth = width;&#10;                int iconHeight = 0; // Header không hiển thị nên height = 0&#10;                int hgap = menuFull ? sheaderFullHgap : 0;&#10;&#10;                // Header không hiển thị nên không cần setBounds&#10;                header.setBounds(0, 0, 0, 0);&#10;&#10;                int menux = x;&#10;                int menuy = y; // Scroll bắt đầu ngay từ y vì không có header&#10;                int menuWidth = width;&#10;                int menuHeight = height; // Sử dụng toàn bộ chiều cao còn lại&#10;                scroll.setBounds(menux, menuy, menuWidth, menuHeight);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#13;&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#13;&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#13;&#10; */&#13;&#10;package vn.edu.iuh.fit.iuhpharmacitymanagement.gui.application.menu;&#13;&#10;&#13;&#10;import com.formdev.flatlaf.FlatClientProperties;&#13;&#10;import com.formdev.flatlaf.util.UIScale;&#13;&#10;import java.awt.Component;&#13;&#10;import java.awt.Container;&#13;&#10;import java.awt.Dimension;&#13;&#10;import java.awt.Insets;&#13;&#10;import java.awt.LayoutManager;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.List;&#13;&#10;import javax.swing.JLabel;&#13;&#10;import javax.swing.JPanel;&#13;&#10;import javax.swing.JScrollBar;&#13;&#10;import javax.swing.JScrollPane;&#13;&#10;&#13;&#10;/**&#13;&#10; *&#13;&#10; * @author PhamTra&#13;&#10; */&#13;&#10;public class Menu extends JPanel {&#13;&#10;&#13;&#10;    private final String menuItems[][] = {&#13;&#10;        {&quot;~MAIN~&quot;},&#13;&#10;        {&quot;Dashboard&quot;},&#13;&#10;        {&quot;~MENU~&quot;},&#13;&#10;        {&quot;1&quot;, &quot;1.1&quot;, &quot;1.2&quot;, &quot;1.3&quot;},&#13;&#10;        {&quot;2&quot;},&#13;&#10;        {&quot;3&quot;},&#13;&#10;        {&quot;~QUẢN LÝ~&quot;},&#13;&#10;        {&quot;Quản lý khách hàng&quot;, &quot;4.1&quot;, &quot;4.2&quot;, &quot;4.3&quot;, &quot;4.4&quot;},&#13;&#10;        {&quot;5&quot;, &quot;5.1&quot;, &quot;5.2&quot;, &quot;5.3&quot;, &quot;5.4&quot;},&#13;&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#13;&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#13;&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#13;&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#13;&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#13;&#10;        {&quot;~BÁO CÁO~&quot;},&#13;&#10;        {&quot;6&quot;, &quot;6.1&quot;, &quot;6.2&quot;, &quot;6.3&quot;, &quot;6.4&quot;},&#13;&#10;        {&quot;7&quot;, &quot;7.1&quot;, &quot;7.2&quot;, &quot;7.3&quot;},&#13;&#10;        {&quot;8&quot;, &quot;8.1&quot;, &quot;8.2&quot;, &quot;8.3&quot;, &quot;8.4&quot;, &quot;8.5&quot;, &quot;8.6&quot;, &quot;8.7&quot;},&#13;&#10;        {&quot;Logout&quot;}&#13;&#10;    };&#13;&#10;&#13;&#10;    public boolean isMenuFull() {&#13;&#10;        return menuFull;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setMenuFull(boolean menuFull) {&#13;&#10;        this.menuFull = menuFull;&#13;&#10;        if (menuFull) {&#13;&#10;            header.setText(headerName);&#13;&#10;            header.setHorizontalAlignment(getComponentOrientation().isLeftToRight() ? JLabel.LEFT : JLabel.RIGHT);&#13;&#10;        } else {&#13;&#10;            header.setText(&quot;&quot;);&#13;&#10;            header.setHorizontalAlignment(JLabel.CENTER);&#13;&#10;        }&#13;&#10;        // Đảm bảo header luôn màu trắng&#13;&#10;        header.setForeground(java.awt.Color.WHITE);&#13;&#10;&#13;&#10;        for (Component com : panelMenu.getComponents()) {&#13;&#10;            if (com instanceof MenuItem) {&#13;&#10;                ((MenuItem) com).setFull(menuFull);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private final List&lt;MenuEvent&gt; events = new ArrayList&lt;&gt;();&#13;&#10;    private boolean menuFull = true;&#13;&#10;    private final String headerName = &quot;IUH PHARMACITY&quot;;&#13;&#10;&#13;&#10;    protected final boolean hideMenuTitleOnMinimum = true;&#13;&#10;    protected final int menuTitleLeftInset = 5;&#13;&#10;    protected final int menuTitleVgap = 5;&#13;&#10;    protected final int menuMaxWidth = 300; // Tăng từ 250 lên 300&#13;&#10;    protected final int menuMinWidth = 80; // Tăng từ 60 lên 80&#13;&#10;    protected final int headerFullHgap = 5;&#13;&#10;&#13;&#10;    public Menu() {&#13;&#10;        init();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void init() {&#13;&#10;        setLayout(new MenuLayout());&#13;&#10;        // Đặt màu nền cố định cho menu&#13;&#10;        setBackground(java.awt.Color.decode(&quot;#00385C&quot;));&#13;&#10;        putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#13;&#10;                + &quot;border:0,0,0,0;&quot; // Loại bỏ tất cả border để menu có thể tràn lên trên&#13;&#10;                + &quot;background:#00385C;&quot;&#13;&#10;                + &quot;arc:10&quot;); // Sửa từ &quot;arc:0,0,10,10&quot; thành &quot;arc:10&quot;&#13;&#10;        header = new JLabel(headerName);&#13;&#10;        // Ẩn header bằng cách đặt visible = false&#13;&#10;        header.setVisible(false);&#13;&#10;        header.setForeground(java.awt.Color.WHITE);&#13;&#10;        header.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#13;&#10;                + &quot;font:$Menu.header.font;&quot;&#13;&#10;                + &quot;foreground:#FFFFFF&quot;);&#13;&#10;&#13;&#10;        //  Menu&#13;&#10;        scroll = new JScrollPane();&#13;&#10;        panelMenu = new JPanel(new MenuItemLayout(this));&#13;&#10;        panelMenu.setBackground(java.awt.Color.decode(&quot;#00385C&quot;));&#13;&#10;        panelMenu.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#13;&#10;                + &quot;border:2,2,2,2;&quot; // Giảm padding&#13;&#10;                + &quot;background:#00385C&quot;);&#13;&#10;&#13;&#10;        scroll.setViewportView(panelMenu);&#13;&#10;        scroll.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#13;&#10;                + &quot;border:null&quot;);&#13;&#10;        JScrollBar vscroll = scroll.getVerticalScrollBar();&#13;&#10;        vscroll.setUnitIncrement(10);&#13;&#10;        // Loại bỏ styling để tránh lỗi với Java 24&#13;&#10;        // vscroll.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;);&#13;&#10;        createMenu();&#13;&#10;        add(header);&#13;&#10;        add(scroll);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void createMenu() {&#13;&#10;        int index = 0;&#13;&#10;        for (int i = 0; i &lt; menuItems.length; i++) {&#13;&#10;            String menuName = menuItems[i][0];&#13;&#10;            if (menuName.startsWith(&quot;~&quot;) &amp;&amp; menuName.endsWith(&quot;~&quot;)) {&#13;&#10;                panelMenu.add(createTitle(menuName));&#13;&#10;            } else {&#13;&#10;                MenuItem menuItem = new MenuItem(this, menuItems[i], index++, events);&#13;&#10;                panelMenu.add(menuItem);&#13;&#10;            }&#13;&#10;        }&#13;&#10;        // các icon trong menu ghi theo dạng [số]+[tên] cho dễ chia&#13;&#10;        // vd: 1-hehe, không ghi 01&#13;&#10;        // icon tải về dùng đuôi svg để đỡ sửa lại w và h&#13;&#10;    }&#13;&#10;&#13;&#10;    private JLabel createTitle(String title) {&#13;&#10;        String menuName = title.substring(1, title.length() - 1);&#13;&#10;        JLabel lbTitle = new JLabel(menuName);&#13;&#10;        // Đặt màu trắng cố định cho tiêu đề&#13;&#10;        lbTitle.setForeground(java.awt.Color.WHITE);&#13;&#10;        lbTitle.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#13;&#10;                + &quot;font:$Menu.label.font;&quot;&#13;&#10;                + &quot;foreground:#FFFFFF&quot;);&#13;&#10;        return lbTitle;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setSelectedMenu(int index, int subIndex) {&#13;&#10;        runEvent(index, subIndex);&#13;&#10;    }&#13;&#10;&#13;&#10;    protected void setSelected(int index, int subIndex) {&#13;&#10;        int size = panelMenu.getComponentCount();&#13;&#10;        for (int i = 0; i &lt; size; i++) {&#13;&#10;            Component com = panelMenu.getComponent(i);&#13;&#10;            if (com instanceof MenuItem) {&#13;&#10;                MenuItem item = (MenuItem) com;&#13;&#10;                if (item.getMenuIndex() == index) {&#13;&#10;                    item.setSelectedIndex(subIndex);&#13;&#10;                } else {&#13;&#10;                    item.setSelectedIndex(-1);&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    protected void runEvent(int index, int subIndex) {&#13;&#10;        MenuAction menuAction = new MenuAction();&#13;&#10;        for (MenuEvent event : events) {&#13;&#10;            event.menuSelected(index, subIndex, menuAction);&#13;&#10;        }&#13;&#10;        if (!menuAction.isCancel()) {&#13;&#10;            setSelected(index, subIndex);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public void addMenuEvent(MenuEvent event) {&#13;&#10;        events.add(event);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void hideMenuItem() {&#13;&#10;        for (Component com : panelMenu.getComponents()) {&#13;&#10;            if (com instanceof MenuItem) {&#13;&#10;                ((MenuItem) com).hideMenuItem();&#13;&#10;            }&#13;&#10;        }&#13;&#10;        revalidate();&#13;&#10;    }&#13;&#10;&#13;&#10;    public boolean isHideMenuTitleOnMinimum() {&#13;&#10;        return hideMenuTitleOnMinimum;&#13;&#10;    }&#13;&#10;&#13;&#10;    public int getMenuTitleLeftInset() {&#13;&#10;        return menuTitleLeftInset;&#13;&#10;    }&#13;&#10;&#13;&#10;    public int getMenuTitleVgap() {&#13;&#10;        return menuTitleVgap;&#13;&#10;    }&#13;&#10;&#13;&#10;    public int getMenuMaxWidth() {&#13;&#10;        return menuMaxWidth;&#13;&#10;    }&#13;&#10;&#13;&#10;    public int getMenuMinWidth() {&#13;&#10;        return menuMinWidth;&#13;&#10;    }&#13;&#10;&#13;&#10;    private JLabel header;&#13;&#10;    private JScrollPane scroll;&#13;&#10;    private JPanel panelMenu;&#13;&#10;&#13;&#10;    private class MenuLayout implements LayoutManager {&#13;&#10;&#13;&#10;        @Override&#13;&#10;        public void addLayoutComponent(String name, Component comp) {&#13;&#10;        }&#13;&#10;&#13;&#10;        @Override&#13;&#10;        public void removeLayoutComponent(Component comp) {&#13;&#10;        }&#13;&#10;&#13;&#10;        @Override&#13;&#10;        public Dimension preferredLayoutSize(Container parent) {&#13;&#10;            synchronized (parent.getTreeLock()) {&#13;&#10;                return new Dimension(5, 5);&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        @Override&#13;&#10;        public Dimension minimumLayoutSize(Container parent) {&#13;&#10;            synchronized (parent.getTreeLock()) {&#13;&#10;                return new Dimension(0, 0);&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        @Override&#13;&#10;        public void layoutContainer(Container parent) {&#13;&#10;            synchronized (parent.getTreeLock()) {&#13;&#10;                Insets insets = parent.getInsets();&#13;&#10;                int x = insets.left;&#13;&#10;                int y = UIScale.scale(5); // Bắt đầu từ 5px vì header bị ẩn&#13;&#10;                int gap = UIScale.scale(3); // Giảm gap&#13;&#10;                int sheaderFullHgap = UIScale.scale(headerFullHgap);&#13;&#10;                int width = parent.getWidth() - (insets.left + insets.right);&#13;&#10;                int height = parent.getHeight() - y - insets.bottom; // Điều chỉnh chiều cao&#13;&#10;                int iconWidth = width;&#13;&#10;                int iconHeight = 0; // Header không hiển thị nên height = 0&#13;&#10;                int hgap = menuFull ? sheaderFullHgap : 0;&#13;&#10;&#13;&#10;                // Header không hiển thị nên không cần setBounds&#13;&#10;                header.setBounds(0, 0, 0, 0);&#13;&#10;&#13;&#10;                int menux = x;&#13;&#10;                int menuy = y; // Scroll bắt đầu ngay từ y vì không có header&#13;&#10;                int menuWidth = width;&#13;&#10;                int menuHeight = height; // Sử dụng toàn bộ chiều cao còn lại&#13;&#10;                scroll.setBounds(menux, menuy, menuWidth, menuHeight);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/vn/edu/iuh/fit/iuhpharmacitymanagement/gui/application/menu/MenuItem.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/vn/edu/iuh/fit/iuhpharmacitymanagement/gui/application/menu/MenuItem.java" />
              <option name="originalContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package vn.edu.iuh.fit.iuhpharmacitymanagement.gui.application.menu;&#10;&#10;import com.formdev.flatlaf.FlatClientProperties;&#10;import com.formdev.flatlaf.extras.FlatSVGIcon;&#10;import com.formdev.flatlaf.ui.FlatUIUtils;&#10;import com.formdev.flatlaf.util.UIScale;&#10;import java.awt.BasicStroke;&#10;import java.awt.Color;&#10;import java.awt.Component;&#10;import java.awt.Container;&#10;import java.awt.Dimension;&#10;import java.awt.Graphics;&#10;import java.awt.Graphics2D;&#10;import java.awt.Insets;&#10;import java.awt.LayoutManager;&#10;import java.awt.RenderingHints;&#10;import java.awt.Shape;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.geom.Path2D;&#10;import java.util.List;&#10;import javax.swing.Icon;&#10;import javax.swing.JButton;&#10;import javax.swing.JPanel;&#10;&#10;/**&#10; *&#10; * @author PhamTra&#10; */&#10;public class MenuItem extends JPanel {&#10;&#10;    public boolean isMenuShow() {&#10;        return menuShow;&#10;    }&#10;&#10;    public void setMenuShow(boolean menuShow) {&#10;        this.menuShow = menuShow;&#10;    }&#10;&#10;    public float getAnimate() {&#10;        return animate;&#10;    }&#10;&#10;    public void setAnimate(float animate) {&#10;        this.animate = animate;&#10;    }&#10;&#10;    public String[] getMenus() {&#10;        return menus;&#10;    }&#10;&#10;    public int getMenuIndex() {&#10;        return menuIndex;&#10;    }&#10;&#10;    private final List&lt;MenuEvent&gt; events;&#10;    private final Menu menu;&#10;    private final String menus[];&#10;    private final int menuIndex;&#10;    private final int menuItemHeight = 38;&#10;    private final int subMenuItemHeight = 35;&#10;    private final int subMenuLeftGap = 34;&#10;    private final int firstGap = 5;&#10;    private final int bottomGap = 5;&#10;    private boolean menuShow;&#10;    private float animate;&#10;&#10;    private PopupSubmenu popup;&#10;&#10;    public MenuItem(Menu menu, String menus[], int menuIndex, List&lt;MenuEvent&gt; events) {&#10;        this.menu = menu;&#10;        this.menus = menus;&#10;        this.menuIndex = menuIndex;&#10;        this.events = events;&#10;        init();&#10;    }&#10;&#10;    private Icon getIcon() {&#10;        // Icon luôn màu trắng cho menu xanh đậm&#10;        Color iconColor = Color.WHITE;&#10;&#10;        FlatSVGIcon icon = new FlatSVGIcon(&quot;icon/menu/&quot; + menuIndex + &quot;.svg&quot;);&#10;        FlatSVGIcon.ColorFilter f = new FlatSVGIcon.ColorFilter();&#10;        f.add(Color.decode(&quot;#969696&quot;), iconColor, iconColor);&#10;        icon.setColorFilter(f);&#10;        return icon;&#10;    }&#10;&#10;    private void init() {&#10;        setLayout(new MenuLayout());&#10;        setBackground(java.awt.Color.decode(&quot;#00385C&quot;));&#10;        setForeground(java.awt.Color.WHITE);&#10;        putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;background:#00385C;&quot;&#10;                + &quot;foreground:#FFFFFF&quot;);&#10;        for (int i = 0; i &lt; menus.length; i++) {&#10;            JButton menuItem = createButtonItem(menus[i]);&#10;            menuItem.setHorizontalAlignment(menuItem.getComponentOrientation().isLeftToRight() ? JButton.LEADING : JButton.TRAILING);&#10;            if (i == 0) {&#10;                menuItem.setIcon(getIcon());&#10;                menuItem.addActionListener((ActionEvent e) -&gt; {&#10;                    if (menus.length &gt; 1) {&#10;                        if (menu.isMenuFull()) {&#10;                            MenuAnimation.animate(MenuItem.this, !menuShow);&#10;                        } else {&#10;                            popup.show(MenuItem.this, (int) MenuItem.this.getWidth() + UIScale.scale(5), UIScale.scale(menuItemHeight) / 2);&#10;                        }&#10;                    } else {&#10;                        menu.runEvent(menuIndex, 0);&#10;                    }&#10;                });&#10;            } else {&#10;                final int subIndex = i;&#10;                menuItem.addActionListener((ActionEvent e) -&gt; {&#10;                    menu.runEvent(menuIndex, subIndex);&#10;                });&#10;            }&#10;            add(menuItem);&#10;        }&#10;        popup = new PopupSubmenu(getComponentOrientation(), menu, menuIndex, menus);&#10;    }&#10;&#10;    protected void setSelectedIndex(int index) {&#10;        int size = getComponentCount();&#10;        boolean selected = false;&#10;        for (int i = 0; i &lt; size; i++) {&#10;            Component com = getComponent(i);&#10;            if (com instanceof JButton) {&#10;                ((JButton) com).setSelected(i == index);&#10;                if (i == index) {&#10;                    selected = true;&#10;                }&#10;            }&#10;        }&#10;        ((JButton) getComponent(0)).setSelected(selected);&#10;        popup.setSelectedIndex(index);&#10;    }&#10;&#10;    private JButton createButtonItem(String text) {&#10;        JButton button = new JButton(text);&#10;        button.setBackground(java.awt.Color.decode(&quot;#00385C&quot;));&#10;        button.setForeground(java.awt.Color.WHITE);&#10;        // Đảm bảo chữ luôn màu trắng&#10;        button.addPropertyChangeListener(&quot;UI&quot;, evt -&gt; {&#10;            button.setForeground(java.awt.Color.WHITE);&#10;        });&#10;        button.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;background:#00385C;&quot;&#10;                + &quot;foreground:#FFFFFF;&quot;&#10;                + &quot;selectedBackground:#1A4A73;&quot;&#10;                + &quot;selectedForeground:#FFFFFF;&quot;&#10;                + &quot;borderWidth:0;&quot;&#10;                + &quot;focusWidth:0;&quot;&#10;                + &quot;innerFocusWidth:0;&quot;&#10;                + &quot;arc:10;&quot;&#10;                + &quot;iconTextGap:10;&quot;&#10;                + &quot;margin:3,11,3,11&quot;);&#10;        return button;&#10;    }&#10;&#10;    public void hideMenuItem() {&#10;        animate = 0;&#10;        menuShow = false;&#10;    }&#10;&#10;    public void setFull(boolean full) {&#10;        if (full) {&#10;            int size = getComponentCount();&#10;            for (int i = 0; i &lt; size; i++) {&#10;                Component com = getComponent(i);&#10;                if (com instanceof JButton) {&#10;                    JButton button = (JButton) com;&#10;                    button.setText(menus[i]);&#10;                    button.setHorizontalAlignment(getComponentOrientation().isLeftToRight() ? JButton.LEFT : JButton.RIGHT);&#10;                    // Đảm bảo chữ luôn màu trắng&#10;                    button.setForeground(java.awt.Color.WHITE);&#10;                }&#10;            }&#10;        } else {&#10;            for (Component com : getComponents()) {&#10;                if (com instanceof JButton) {&#10;                    JButton button = (JButton) com;&#10;                    button.setText(&quot;&quot;);&#10;                    button.setHorizontalAlignment(JButton.CENTER);&#10;                    // Đảm bảo chữ luôn màu trắng&#10;                    button.setForeground(java.awt.Color.WHITE);&#10;                }&#10;            }&#10;            animate = 0f;&#10;            menuShow = false;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void paintComponent(Graphics g) {&#10;        super.paintComponent(g);&#10;        if (animate &gt; 0) {&#10;            int ssubMenuItemHeight = UIScale.scale(subMenuItemHeight);&#10;            int ssubMenuLeftGap = UIScale.scale(subMenuLeftGap);&#10;            int smenuItemHeight = UIScale.scale(menuItemHeight);&#10;            int sfirstGap = UIScale.scale(firstGap);&#10;            Graphics2D g2 = (Graphics2D) g.create();&#10;            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#10;            Path2D.Double p = new Path2D.Double();&#10;            int last = getComponent(getComponentCount() - 1).getY() + (ssubMenuItemHeight / 2);&#10;            boolean ltr = getComponentOrientation().isLeftToRight();&#10;            int round = UIScale.scale(10);&#10;            int x = ltr ? (ssubMenuLeftGap - round) : (getWidth() - (ssubMenuLeftGap - round));&#10;            p.moveTo(x, smenuItemHeight + sfirstGap);&#10;            p.lineTo(x, last - round);&#10;            for (int i = 1; i &lt; getComponentCount(); i++) {&#10;                int com = getComponent(i).getY() + (ssubMenuItemHeight / 2);&#10;                p.append(createCurve(round, x, com, ltr), false);&#10;            }&#10;            g2.setColor(getForeground());&#10;            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);&#10;            g2.setStroke(new BasicStroke(UIScale.scale(1f)));&#10;            g2.draw(p);&#10;            g2.dispose();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void paint(Graphics g) {&#10;        super.paint(g);&#10;        if (menus.length &gt; 1) {&#10;            Graphics2D g2 = (Graphics2D) g.create();&#10;            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#10;            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);&#10;            g2.setColor(FlatUIUtils.getUIColor(&quot;Menu.arrowColor&quot;, getForeground()));&#10;            int smenuItemHeight = UIScale.scale(menuItemHeight);&#10;            boolean ltr = getComponentOrientation().isLeftToRight();&#10;            g2.setStroke(new BasicStroke(UIScale.scale(1f)));&#10;            if (menu.isMenuFull()) {&#10;                int arrowWidth = UIScale.scale(10);&#10;                int arrowHeight = UIScale.scale(5);&#10;                int ax = ltr ? (getWidth() - arrowWidth * 2) : arrowWidth;&#10;                int ay = (smenuItemHeight - arrowHeight) / 2;&#10;                Path2D p = new Path2D.Double();&#10;                p.moveTo(0, animate * arrowHeight);&#10;                p.lineTo(arrowWidth / 2, (1f - animate) * arrowHeight);&#10;                p.lineTo(arrowWidth, animate * arrowHeight);&#10;                g2.translate(ax, ay);&#10;                g2.draw(p);&#10;            } else {&#10;                int arrowWidth = UIScale.scale(4);&#10;                int arrowHeight = UIScale.scale(8);&#10;                int ax = ltr ? (getWidth() - arrowWidth - UIScale.scale(3)) : UIScale.scale(3);&#10;                int ay = (smenuItemHeight - arrowHeight) / 2;&#10;                Path2D p = new Path2D.Double();&#10;                if (ltr) {&#10;                    p.moveTo(0, 0);&#10;                    p.lineTo(arrowWidth, arrowHeight / 2);&#10;                    p.lineTo(0, arrowHeight);&#10;                } else {&#10;                    p.moveTo(arrowWidth, 0);&#10;                    p.lineTo(0, arrowHeight / 2);&#10;                    p.lineTo(arrowWidth, arrowHeight);&#10;                }&#10;                g2.translate(ax, ay);&#10;                g2.draw(p);&#10;            }&#10;            g2.dispose();&#10;        }&#10;    }&#10;&#10;    private Shape createCurve(int round, int x, int y, boolean ltr) {&#10;        Path2D p2 = new Path2D.Double();&#10;        p2.moveTo(x, y - round);&#10;        p2.curveTo(x, y - round, x, y, x + (ltr ? round : -round), y);&#10;        return p2;&#10;    }&#10;&#10;    private class MenuLayout implements LayoutManager {&#10;&#10;        @Override&#10;        public void addLayoutComponent(String name, Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public void removeLayoutComponent(Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public Dimension preferredLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                Insets inset = parent.getInsets();&#10;                int width = parent.getWidth();&#10;                int height = inset.top + inset.bottom;&#10;                int size = parent.getComponentCount();&#10;                Component item = parent.getComponent(0);&#10;                height += UIScale.scale(menuItemHeight);&#10;                if (item.isVisible()) {&#10;                    int subMenuHeight = size &gt; 1 ? UIScale.scale(firstGap) + UIScale.scale(bottomGap) : 0;&#10;                    for (int i = 1; i &lt; size; i++) {&#10;                        Component com = parent.getComponent(i);&#10;                        if (com.isVisible()) {&#10;                            subMenuHeight += UIScale.scale(subMenuItemHeight);&#10;                        }&#10;                    }&#10;                    height += (subMenuHeight * animate);&#10;                } else {&#10;                    height = 0;&#10;                }&#10;                return new Dimension(width, height);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public Dimension minimumLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(0, 0);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void layoutContainer(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                boolean ltr = parent.getComponentOrientation().isLeftToRight();&#10;                Insets insets = parent.getInsets();&#10;                int x = insets.left;&#10;                int y = insets.top;&#10;                int width = parent.getWidth() - (insets.left + insets.right);&#10;                int size = parent.getComponentCount();&#10;                for (int i = 0; i &lt; size; i++) {&#10;                    Component com = parent.getComponent(i);&#10;                    if (com.isVisible()) {&#10;                        if (i == 0) {&#10;                            int smenuItemHeight = UIScale.scale(menuItemHeight);&#10;                            int sfirstGap = UIScale.scale(firstGap);&#10;                            com.setBounds(x, y, width, smenuItemHeight);&#10;                            y += smenuItemHeight + sfirstGap;&#10;                        } else {&#10;                            int ssubMenuLeftGap = UIScale.scale(subMenuLeftGap);&#10;                            int subMenuX = ltr ? ssubMenuLeftGap : 0;&#10;                            int ssubMenuItemHeight = UIScale.scale(subMenuItemHeight);&#10;                            com.setBounds(x + subMenuX, y, width - ssubMenuLeftGap, ssubMenuItemHeight);&#10;                            y += ssubMenuItemHeight;&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#13;&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#13;&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#13;&#10; */&#13;&#10;package vn.edu.iuh.fit.iuhpharmacitymanagement.gui.application.menu;&#13;&#10;&#13;&#10;import com.formdev.flatlaf.FlatClientProperties;&#13;&#10;import com.formdev.flatlaf.extras.FlatSVGIcon;&#13;&#10;import com.formdev.flatlaf.ui.FlatUIUtils;&#13;&#10;import com.formdev.flatlaf.util.UIScale;&#13;&#10;import java.awt.BasicStroke;&#13;&#10;import java.awt.Color;&#13;&#10;import java.awt.Component;&#13;&#10;import java.awt.Container;&#13;&#10;import java.awt.Dimension;&#13;&#10;import java.awt.Graphics;&#13;&#10;import java.awt.Graphics2D;&#13;&#10;import java.awt.Insets;&#13;&#10;import java.awt.LayoutManager;&#13;&#10;import java.awt.RenderingHints;&#13;&#10;import java.awt.Shape;&#13;&#10;import java.awt.event.ActionEvent;&#13;&#10;import java.awt.geom.Path2D;&#13;&#10;import java.util.List;&#13;&#10;import javax.swing.Icon;&#13;&#10;import javax.swing.JButton;&#13;&#10;import javax.swing.JPanel;&#13;&#10;&#13;&#10;/**&#13;&#10; *&#13;&#10; * @author PhamTra&#13;&#10; */&#13;&#10;public class MenuItem extends JPanel {&#13;&#10;&#13;&#10;    public boolean isMenuShow() {&#13;&#10;        return menuShow;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setMenuShow(boolean menuShow) {&#13;&#10;        this.menuShow = menuShow;&#13;&#10;    }&#13;&#10;&#13;&#10;    public float getAnimate() {&#13;&#10;        return animate;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setAnimate(float animate) {&#13;&#10;        this.animate = animate;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String[] getMenus() {&#13;&#10;        return menus;&#13;&#10;    }&#13;&#10;&#13;&#10;    public int getMenuIndex() {&#13;&#10;        return menuIndex;&#13;&#10;    }&#13;&#10;&#13;&#10;    private final List&lt;MenuEvent&gt; events;&#13;&#10;    private final Menu menu;&#13;&#10;    private final String menus[];&#13;&#10;    private final int menuIndex;&#13;&#10;    private final int menuItemHeight = 38;&#13;&#10;    private final int subMenuItemHeight = 35;&#13;&#10;    private final int subMenuLeftGap = 34;&#13;&#10;    private final int firstGap = 5;&#13;&#10;    private final int bottomGap = 5;&#13;&#10;    private boolean menuShow;&#13;&#10;    private float animate;&#13;&#10;&#13;&#10;    private PopupSubmenu popup;&#13;&#10;&#13;&#10;    public MenuItem(Menu menu, String menus[], int menuIndex, List&lt;MenuEvent&gt; events) {&#13;&#10;        this.menu = menu;&#13;&#10;        this.menus = menus;&#13;&#10;        this.menuIndex = menuIndex;&#13;&#10;        this.events = events;&#13;&#10;        init();&#13;&#10;    }&#13;&#10;&#13;&#10;    private Icon getIcon() {&#13;&#10;        // Icon luôn màu trắng cho menu xanh đậm&#13;&#10;        Color iconColor = Color.WHITE;&#13;&#10;&#13;&#10;        FlatSVGIcon icon = new FlatSVGIcon(&quot;icon/menu/&quot; + menuIndex + &quot;.svg&quot;);&#13;&#10;        FlatSVGIcon.ColorFilter f = new FlatSVGIcon.ColorFilter();&#13;&#10;        f.add(Color.decode(&quot;#969696&quot;), iconColor, iconColor);&#13;&#10;        icon.setColorFilter(f);&#13;&#10;        return icon;&#13;&#10;    }&#13;&#10;&#13;&#10;    private void init() {&#13;&#10;        setLayout(new MenuLayout());&#13;&#10;        setBackground(java.awt.Color.decode(&quot;#00385C&quot;));&#13;&#10;        setForeground(java.awt.Color.WHITE);&#13;&#10;        putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#13;&#10;                + &quot;background:#00385C;&quot;&#13;&#10;                + &quot;foreground:#FFFFFF&quot;);&#13;&#10;        for (int i = 0; i &lt; menus.length; i++) {&#13;&#10;            JButton menuItem = createButtonItem(menus[i]);&#13;&#10;            menuItem.setHorizontalAlignment(menuItem.getComponentOrientation().isLeftToRight() ? JButton.LEADING : JButton.TRAILING);&#13;&#10;            if (i == 0) {&#13;&#10;                menuItem.setIcon(getIcon());&#13;&#10;                menuItem.addActionListener((ActionEvent e) -&gt; {&#13;&#10;                    if (menus.length &gt; 1) {&#13;&#10;                        if (menu.isMenuFull()) {&#13;&#10;                            MenuAnimation.animate(MenuItem.this, !menuShow);&#13;&#10;                        } else {&#13;&#10;                            popup.show(MenuItem.this, (int) MenuItem.this.getWidth() + UIScale.scale(5), UIScale.scale(menuItemHeight) / 2);&#13;&#10;                        }&#13;&#10;                    } else {&#13;&#10;                        menu.runEvent(menuIndex, 0);&#13;&#10;                    }&#13;&#10;                });&#13;&#10;            } else {&#13;&#10;                final int subIndex = i;&#13;&#10;                menuItem.addActionListener((ActionEvent e) -&gt; {&#13;&#10;                    menu.runEvent(menuIndex, subIndex);&#13;&#10;                });&#13;&#10;            }&#13;&#10;            add(menuItem);&#13;&#10;        }&#13;&#10;        popup = new PopupSubmenu(getComponentOrientation(), menu, menuIndex, menus);&#13;&#10;    }&#13;&#10;&#13;&#10;    protected void setSelectedIndex(int index) {&#13;&#10;        int size = getComponentCount();&#13;&#10;        boolean selected = false;&#13;&#10;        for (int i = 0; i &lt; size; i++) {&#13;&#10;            Component com = getComponent(i);&#13;&#10;            if (com instanceof JButton) {&#13;&#10;                ((JButton) com).setSelected(i == index);&#13;&#10;                if (i == index) {&#13;&#10;                    selected = true;&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;        ((JButton) getComponent(0)).setSelected(selected);&#13;&#10;        popup.setSelectedIndex(index);&#13;&#10;    }&#13;&#10;&#13;&#10;    private JButton createButtonItem(String text) {&#13;&#10;        JButton button = new JButton(text);&#13;&#10;        button.setBackground(java.awt.Color.decode(&quot;#00385C&quot;));&#13;&#10;        button.setForeground(java.awt.Color.WHITE);&#13;&#10;        // Đảm bảo chữ luôn màu trắng&#13;&#10;        button.addPropertyChangeListener(&quot;UI&quot;, evt -&gt; {&#13;&#10;            button.setForeground(java.awt.Color.WHITE);&#13;&#10;        });&#13;&#10;        button.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#13;&#10;                + &quot;background:#00385C;&quot;&#13;&#10;                + &quot;foreground:#FFFFFF;&quot;&#13;&#10;                + &quot;selectedBackground:#1A4A73;&quot;&#13;&#10;                + &quot;selectedForeground:#FFFFFF;&quot;&#13;&#10;                + &quot;borderWidth:0;&quot;&#13;&#10;                + &quot;focusWidth:0;&quot;&#13;&#10;                + &quot;innerFocusWidth:0;&quot;&#13;&#10;                + &quot;arc:10;&quot; // Đã đúng định dạng&#13;&#10;                + &quot;iconTextGap:10;&quot;&#13;&#10;                + &quot;margin:3,11,3,11&quot;);&#13;&#10;        return button;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void hideMenuItem() {&#13;&#10;        animate = 0;&#13;&#10;        menuShow = false;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setFull(boolean full) {&#13;&#10;        if (full) {&#13;&#10;            int size = getComponentCount();&#13;&#10;            for (int i = 0; i &lt; size; i++) {&#13;&#10;                Component com = getComponent(i);&#13;&#10;                if (com instanceof JButton) {&#13;&#10;                    JButton button = (JButton) com;&#13;&#10;                    button.setText(menus[i]);&#13;&#10;                    button.setHorizontalAlignment(getComponentOrientation().isLeftToRight() ? JButton.LEFT : JButton.RIGHT);&#13;&#10;                    // Đảm bảo chữ luôn màu trắng&#13;&#10;                    button.setForeground(java.awt.Color.WHITE);&#13;&#10;                }&#13;&#10;            }&#13;&#10;        } else {&#13;&#10;            for (Component com : getComponents()) {&#13;&#10;                if (com instanceof JButton) {&#13;&#10;                    JButton button = (JButton) com;&#13;&#10;                    button.setText(&quot;&quot;);&#13;&#10;                    button.setHorizontalAlignment(JButton.CENTER);&#13;&#10;                    // Đảm bảo chữ luôn màu trắng&#13;&#10;                    button.setForeground(java.awt.Color.WHITE);&#13;&#10;                }&#13;&#10;            }&#13;&#10;            animate = 0f;&#13;&#10;            menuShow = false;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void paintComponent(Graphics g) {&#13;&#10;        super.paintComponent(g);&#13;&#10;        if (animate &gt; 0) {&#13;&#10;            int ssubMenuItemHeight = UIScale.scale(subMenuItemHeight);&#13;&#10;            int ssubMenuLeftGap = UIScale.scale(subMenuLeftGap);&#13;&#10;            int smenuItemHeight = UIScale.scale(menuItemHeight);&#13;&#10;            int sfirstGap = UIScale.scale(firstGap);&#13;&#10;            Graphics2D g2 = (Graphics2D) g.create();&#13;&#10;            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#13;&#10;            Path2D.Double p = new Path2D.Double();&#13;&#10;            int last = getComponent(getComponentCount() - 1).getY() + (ssubMenuItemHeight / 2);&#13;&#10;            boolean ltr = getComponentOrientation().isLeftToRight();&#13;&#10;            int round = UIScale.scale(10);&#13;&#10;            int x = ltr ? (ssubMenuLeftGap - round) : (getWidth() - (ssubMenuLeftGap - round));&#13;&#10;            p.moveTo(x, smenuItemHeight + sfirstGap);&#13;&#10;            p.lineTo(x, last - round);&#13;&#10;            for (int i = 1; i &lt; getComponentCount(); i++) {&#13;&#10;                int com = getComponent(i).getY() + (ssubMenuItemHeight / 2);&#13;&#10;                p.append(createCurve(round, x, com, ltr), false);&#13;&#10;            }&#13;&#10;            g2.setColor(getForeground());&#13;&#10;            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);&#13;&#10;            g2.setStroke(new BasicStroke(UIScale.scale(1f)));&#13;&#10;            g2.draw(p);&#13;&#10;            g2.dispose();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void paint(Graphics g) {&#13;&#10;        super.paint(g);&#13;&#10;        if (menus.length &gt; 1) {&#13;&#10;            Graphics2D g2 = (Graphics2D) g.create();&#13;&#10;            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#13;&#10;            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);&#13;&#10;            g2.setColor(FlatUIUtils.getUIColor(&quot;Menu.arrowColor&quot;, getForeground()));&#13;&#10;            int smenuItemHeight = UIScale.scale(menuItemHeight);&#13;&#10;            boolean ltr = getComponentOrientation().isLeftToRight();&#13;&#10;            g2.setStroke(new BasicStroke(UIScale.scale(1f)));&#13;&#10;            if (menu.isMenuFull()) {&#13;&#10;                int arrowWidth = UIScale.scale(10);&#13;&#10;                int arrowHeight = UIScale.scale(5);&#13;&#10;                int ax = ltr ? (getWidth() - arrowWidth * 2) : arrowWidth;&#13;&#10;                int ay = (smenuItemHeight - arrowHeight) / 2;&#13;&#10;                Path2D p = new Path2D.Double();&#13;&#10;                p.moveTo(0, animate * arrowHeight);&#13;&#10;                p.lineTo(arrowWidth / 2, (1f - animate) * arrowHeight);&#13;&#10;                p.lineTo(arrowWidth, animate * arrowHeight);&#13;&#10;                g2.translate(ax, ay);&#13;&#10;                g2.draw(p);&#13;&#10;            } else {&#13;&#10;                int arrowWidth = UIScale.scale(4);&#13;&#10;                int arrowHeight = UIScale.scale(8);&#13;&#10;                int ax = ltr ? (getWidth() - arrowWidth - UIScale.scale(3)) : UIScale.scale(3);&#13;&#10;                int ay = (smenuItemHeight - arrowHeight) / 2;&#13;&#10;                Path2D p = new Path2D.Double();&#13;&#10;                if (ltr) {&#13;&#10;                    p.moveTo(0, 0);&#13;&#10;                    p.lineTo(arrowWidth, arrowHeight / 2);&#13;&#10;                    p.lineTo(0, arrowHeight);&#13;&#10;                } else {&#13;&#10;                    p.moveTo(arrowWidth, 0);&#13;&#10;                    p.lineTo(0, arrowHeight / 2);&#13;&#10;                    p.lineTo(arrowWidth, arrowHeight);&#13;&#10;                }&#13;&#10;                g2.translate(ax, ay);&#13;&#10;                g2.draw(p);&#13;&#10;            }&#13;&#10;            g2.dispose();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private Shape createCurve(int round, int x, int y, boolean ltr) {&#13;&#10;        Path2D p2 = new Path2D.Double();&#13;&#10;        p2.moveTo(x, y - round);&#13;&#10;        p2.curveTo(x, y - round, x, y, x + (ltr ? round : -round), y);&#13;&#10;        return p2;&#13;&#10;    }&#13;&#10;&#13;&#10;    private class MenuLayout implements LayoutManager {&#13;&#10;&#13;&#10;        @Override&#13;&#10;        public void addLayoutComponent(String name, Component comp) {&#13;&#10;        }&#13;&#10;&#13;&#10;        @Override&#13;&#10;        public void removeLayoutComponent(Component comp) {&#13;&#10;        }&#13;&#10;&#13;&#10;        @Override&#13;&#10;        public Dimension preferredLayoutSize(Container parent) {&#13;&#10;            synchronized (parent.getTreeLock()) {&#13;&#10;                Insets inset = parent.getInsets();&#13;&#10;                int width = parent.getWidth();&#13;&#10;                int height = inset.top + inset.bottom;&#13;&#10;                int size = parent.getComponentCount();&#13;&#10;                Component item = parent.getComponent(0);&#13;&#10;                height += UIScale.scale(menuItemHeight);&#13;&#10;                if (item.isVisible()) {&#13;&#10;                    int subMenuHeight = size &gt; 1 ? UIScale.scale(firstGap) + UIScale.scale(bottomGap) : 0;&#13;&#10;                    for (int i = 1; i &lt; size; i++) {&#13;&#10;                        Component com = parent.getComponent(i);&#13;&#10;                        if (com.isVisible()) {&#13;&#10;                            subMenuHeight += UIScale.scale(subMenuItemHeight);&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                    height += (subMenuHeight * animate);&#13;&#10;                } else {&#13;&#10;                    height = 0;&#13;&#10;                }&#13;&#10;                return new Dimension(width, height);&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        @Override&#13;&#10;        public Dimension minimumLayoutSize(Container parent) {&#13;&#10;            synchronized (parent.getTreeLock()) {&#13;&#10;                return new Dimension(0, 0);&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        @Override&#13;&#10;        public void layoutContainer(Container parent) {&#13;&#10;            synchronized (parent.getTreeLock()) {&#13;&#10;                boolean ltr = parent.getComponentOrientation().isLeftToRight();&#13;&#10;                Insets insets = parent.getInsets();&#13;&#10;                int x = insets.left;&#13;&#10;                int y = insets.top;&#13;&#10;                int width = parent.getWidth() - (insets.left + insets.right);&#13;&#10;                int size = parent.getComponentCount();&#13;&#10;                for (int i = 0; i &lt; size; i++) {&#13;&#10;                    Component com = parent.getComponent(i);&#13;&#10;                    if (com.isVisible()) {&#13;&#10;                        if (i == 0) {&#13;&#10;                            int smenuItemHeight = UIScale.scale(menuItemHeight);&#13;&#10;                            int sfirstGap = UIScale.scale(firstGap);&#13;&#10;                            com.setBounds(x, y, width, smenuItemHeight);&#13;&#10;                            y += smenuItemHeight + sfirstGap;&#13;&#10;                        } else {&#13;&#10;                            int ssubMenuLeftGap = UIScale.scale(subMenuLeftGap);&#13;&#10;                            int subMenuX = ltr ? ssubMenuLeftGap : 0;&#13;&#10;                            int ssubMenuItemHeight = UIScale.scale(subMenuItemHeight);&#13;&#10;                            com.setBounds(x + subMenuX, y, width - ssubMenuLeftGap, ssubMenuItemHeight);&#13;&#10;                            y += ssubMenuItemHeight;&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/vn/edu/iuh/fit/iuhpharmacitymanagement/gui/application/menu/PopupSubmenu.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/vn/edu/iuh/fit/iuhpharmacitymanagement/gui/application/menu/PopupSubmenu.java" />
              <option name="originalContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package vn.edu.iuh.fit.iuhpharmacitymanagement.gui.application.menu;&#10;&#10;import com.formdev.flatlaf.FlatClientProperties;&#10;import com.formdev.flatlaf.util.UIScale;&#10;import java.awt.BasicStroke;&#10;import java.awt.Component;&#10;import java.awt.ComponentOrientation;&#10;import java.awt.Container;&#10;import java.awt.Dimension;&#10;import java.awt.Graphics;&#10;import java.awt.Graphics2D;&#10;import java.awt.Insets;&#10;import java.awt.LayoutManager;&#10;import java.awt.RenderingHints;&#10;import java.awt.Shape;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.geom.Path2D;&#10;import javax.swing.JButton;&#10;import javax.swing.JPanel;&#10;import javax.swing.JPopupMenu;&#10;import javax.swing.SwingUtilities;&#10;&#10;/**&#10; *&#10; * @author PhamTra&#10; */&#10;public class PopupSubmenu extends JPanel {&#10;&#10;    private final Menu menu;&#10;    private final int menuIndex;&#10;    private final int subMenuLeftGap = 20;&#10;    private final int subMenuItemHeight = 30;&#10;    private final String menus[];&#10;    private JPopupMenu popup;&#10;&#10;    public PopupSubmenu(ComponentOrientation orientation, Menu menu, int menuIndex, String menus[]) {&#10;        this.menu = menu;&#10;        this.menuIndex = menuIndex;&#10;        this.menus = menus;&#10;        applyComponentOrientation(orientation);&#10;        init();&#10;    }&#10;&#10;    private void init() {&#10;        setLayout(new MenuLayout());&#10;        popup = new JPopupMenu();&#10;        popup.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;background:$Menu.background;&quot;&#10;                + &quot;borderColor:$Menu.background;&quot;);&#10;        putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;border:0,3,0,3;&quot;&#10;                + &quot;background:$Menu.background;&quot;&#10;                + &quot;foreground:$Menu.lineColor&quot;);&#10;        for (int i = 1; i &lt; menus.length; i++) {&#10;            JButton button = createButtonItem(menus[i]);&#10;            final int subIndex = i;&#10;            button.addActionListener((ActionEvent e) -&gt; {&#10;                menu.runEvent(menuIndex, subIndex);&#10;                popup.setVisible(false);&#10;            });&#10;            add(button);&#10;        }&#10;        popup.add(this);&#10;    }&#10;&#10;    private JButton createButtonItem(String text) {&#10;        JButton button = new JButton(text);&#10;        button.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;background:$Menu.background;&quot;&#10;                + &quot;foreground:$Menu.foreground;&quot;&#10;                + &quot;selectedBackground:$Menu.button.selectedBackground;&quot;&#10;                + &quot;selectedForeground:$Menu.button.selectedForeground;&quot;&#10;                + &quot;borderWidth:0;&quot;&#10;                + &quot;arc:10;&quot;&#10;                + &quot;focusWidth:0;&quot;&#10;                + &quot;iconTextGap:10;&quot;&#10;                + &quot;margin:5,11,5,11&quot;);&#10;        return button;&#10;    }&#10;&#10;    public void show(Component com, int x, int y) {&#10;        if (menu.getComponentOrientation().isLeftToRight()) {&#10;            popup.show(com, x, y);&#10;        } else {&#10;            int px = getPreferredSize().width + UIScale.scale(5);&#10;            popup.show(com, -px, y);&#10;        }&#10;        applyAlignment();&#10;        SwingUtilities.updateComponentTreeUI(popup);&#10;    }&#10;&#10;    private void applyAlignment() {&#10;        setComponentOrientation(menu.getComponentOrientation());&#10;        for (Component c : getComponents()) {&#10;            if (c instanceof JButton) {&#10;                ((JButton) c).setHorizontalAlignment(menu.getComponentOrientation().isLeftToRight() ? JButton.LEFT : JButton.RIGHT);&#10;            }&#10;        }&#10;    }&#10;&#10;    protected void setSelectedIndex(int index) {&#10;        int size = getComponentCount();&#10;        for (int i = 0; i &lt; size; i++) {&#10;            Component com = getComponent(i);&#10;            if (com instanceof JButton) {&#10;                ((JButton) com).setSelected(i == index - 1);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void paintComponent(Graphics g) {&#10;        super.paintComponent(g);&#10;        Graphics2D g2 = (Graphics2D) g.create();&#10;        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#10;        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);&#10;        int ssubMenuItemHeight = UIScale.scale(subMenuItemHeight);&#10;        int ssubMenuLeftGap = UIScale.scale(subMenuLeftGap);&#10;        Path2D.Double p = new Path2D.Double();&#10;        int last = getComponent(getComponentCount() - 1).getY() + (ssubMenuItemHeight / 2);&#10;        boolean ltr = getComponentOrientation().isLeftToRight();&#10;        int round = UIScale.scale(10);&#10;        int x = ltr ? (ssubMenuLeftGap - round) : (getWidth() - (ssubMenuLeftGap - round));&#10;        p.moveTo(x, 0);&#10;        p.lineTo(x, last - round);&#10;        for (int i = 0; i &lt; getComponentCount(); i++) {&#10;            int com = getComponent(i).getY() + (ssubMenuItemHeight / 2);&#10;            p.append(createCurve(round, x, com, ltr), false);&#10;        }&#10;        g2.setColor(getForeground());&#10;        g2.setStroke(new BasicStroke(UIScale.scale(1f)));&#10;        g2.draw(p);&#10;        g2.dispose();&#10;    }&#10;&#10;    private Shape createCurve(int round, int x, int y, boolean ltr) {&#10;        Path2D p2 = new Path2D.Double();&#10;        p2.moveTo(x, y - round);&#10;        p2.curveTo(x, y - round, x, y, x + (ltr ? round : -round), y);&#10;        return p2;&#10;    }&#10;&#10;    private class MenuLayout implements LayoutManager {&#10;&#10;        @Override&#10;        public void addLayoutComponent(String name, Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public void removeLayoutComponent(Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public Dimension preferredLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                Insets insets = parent.getInsets();&#10;                int maxWidth = UIScale.scale(150);&#10;                int ssubMenuLeftGap = UIScale.scale(subMenuLeftGap);&#10;                int width = getMaxWidth(parent) + ssubMenuLeftGap;&#10;                int height = (insets.top + insets.bottom);&#10;                int size = parent.getComponentCount();&#10;                for (int i = 0; i &lt; size; i++) {&#10;                    Component com = parent.getComponent(i);&#10;                    if (com.isVisible()) {&#10;                        height += UIScale.scale(subMenuItemHeight);&#10;                        width = Math.max(width, com.getPreferredSize().width);&#10;                    }&#10;                }&#10;                width += insets.left + insets.right;&#10;                return new Dimension(Math.max(width, maxWidth), height);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public Dimension minimumLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(0, 0);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void layoutContainer(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                boolean ltr = parent.getComponentOrientation().isLeftToRight();&#10;                Insets insets = parent.getInsets();&#10;                int ssubMenuLeftGap = UIScale.scale(subMenuLeftGap);&#10;                int ssubMenuItemHeight = UIScale.scale(subMenuItemHeight);&#10;                int x = insets.left + (ltr ? ssubMenuLeftGap : 0);&#10;                int y = insets.top;&#10;                int width = getMaxWidth(parent);&#10;                int size = parent.getComponentCount();&#10;                for (int i = 0; i &lt; size; i++) {&#10;                    Component com = parent.getComponent(i);&#10;                    if (com.isVisible()) {&#10;                        com.setBounds(x, y, width, ssubMenuItemHeight);&#10;                        y += ssubMenuItemHeight;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        private int getMaxWidth(Container parent) {&#10;            int size = parent.getComponentCount();&#10;            int maxWidth = UIScale.scale(150);&#10;            int max = 0;&#10;            for (int i = 0; i &lt; size; i++) {&#10;                Component com = parent.getComponent(i);&#10;                if (com.isVisible()) {&#10;                    max = Math.max(max, com.getPreferredSize().width);&#10;                }&#10;            }&#10;            return Math.max(max, maxWidth);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#13;&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#13;&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#13;&#10; */&#13;&#10;package vn.edu.iuh.fit.iuhpharmacitymanagement.gui.application.menu;&#13;&#10;&#13;&#10;import com.formdev.flatlaf.FlatClientProperties;&#13;&#10;import com.formdev.flatlaf.util.UIScale;&#13;&#10;import java.awt.BasicStroke;&#13;&#10;import java.awt.Component;&#13;&#10;import java.awt.ComponentOrientation;&#13;&#10;import java.awt.Container;&#13;&#10;import java.awt.Dimension;&#13;&#10;import java.awt.Graphics;&#13;&#10;import java.awt.Graphics2D;&#13;&#10;import java.awt.Insets;&#13;&#10;import java.awt.LayoutManager;&#13;&#10;import java.awt.RenderingHints;&#13;&#10;import java.awt.Shape;&#13;&#10;import java.awt.event.ActionEvent;&#13;&#10;import java.awt.geom.Path2D;&#13;&#10;import javax.swing.JButton;&#13;&#10;import javax.swing.JPanel;&#13;&#10;import javax.swing.JPopupMenu;&#13;&#10;import javax.swing.SwingUtilities;&#13;&#10;&#13;&#10;/**&#13;&#10; *&#13;&#10; * @author PhamTra&#13;&#10; */&#13;&#10;public class PopupSubmenu extends JPanel {&#13;&#10;&#13;&#10;    private final Menu menu;&#13;&#10;    private final int menuIndex;&#13;&#10;    private final int subMenuLeftGap = 20;&#13;&#10;    private final int subMenuItemHeight = 30;&#13;&#10;    private final String menus[];&#13;&#10;    private JPopupMenu popup;&#13;&#10;&#13;&#10;    public PopupSubmenu(ComponentOrientation orientation, Menu menu, int menuIndex, String menus[]) {&#13;&#10;        this.menu = menu;&#13;&#10;        this.menuIndex = menuIndex;&#13;&#10;        this.menus = menus;&#13;&#10;        applyComponentOrientation(orientation);&#13;&#10;        init();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void init() {&#13;&#10;        setLayout(new MenuLayout());&#13;&#10;        popup = new JPopupMenu();&#13;&#10;        popup.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#13;&#10;                + &quot;background:$Menu.background;&quot;&#13;&#10;                + &quot;borderColor:$Menu.background;&quot;);&#13;&#10;        putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#13;&#10;                + &quot;border:0,3,0,3;&quot;&#13;&#10;                + &quot;background:$Menu.background;&quot;&#13;&#10;                + &quot;foreground:$Menu.lineColor&quot;);&#13;&#10;        for (int i = 1; i &lt; menus.length; i++) {&#13;&#10;            JButton button = createButtonItem(menus[i]);&#13;&#10;            final int subIndex = i;&#13;&#10;            button.addActionListener((ActionEvent e) -&gt; {&#13;&#10;                menu.runEvent(menuIndex, subIndex);&#13;&#10;                popup.setVisible(false);&#13;&#10;            });&#13;&#10;            add(button);&#13;&#10;        }&#13;&#10;        popup.add(this);&#13;&#10;    }&#13;&#10;&#13;&#10;    private JButton createButtonItem(String text) {&#13;&#10;        JButton button = new JButton(text);&#13;&#10;        button.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#13;&#10;                + &quot;background:$Menu.background;&quot;&#13;&#10;                + &quot;foreground:$Menu.foreground;&quot;&#13;&#10;                + &quot;selectedBackground:$Menu.button.selectedBackground;&quot;&#13;&#10;                + &quot;selectedForeground:$Menu.button.selectedForeground;&quot;&#13;&#10;                + &quot;borderWidth:0;&quot;&#13;&#10;                + &quot;arc:10;&quot; // Đã đúng định dạng&#13;&#10;                + &quot;focusWidth:0;&quot;&#13;&#10;                + &quot;iconTextGap:10;&quot;&#13;&#10;                + &quot;margin:5,11,5,11&quot;);&#13;&#10;        return button;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void show(Component com, int x, int y) {&#13;&#10;        if (menu.getComponentOrientation().isLeftToRight()) {&#13;&#10;            popup.show(com, x, y);&#13;&#10;        } else {&#13;&#10;            int px = getPreferredSize().width + UIScale.scale(5);&#13;&#10;            popup.show(com, -px, y);&#13;&#10;        }&#13;&#10;        applyAlignment();&#13;&#10;        SwingUtilities.updateComponentTreeUI(popup);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void applyAlignment() {&#13;&#10;        setComponentOrientation(menu.getComponentOrientation());&#13;&#10;        for (Component c : getComponents()) {&#13;&#10;            if (c instanceof JButton) {&#13;&#10;                ((JButton) c).setHorizontalAlignment(menu.getComponentOrientation().isLeftToRight() ? JButton.LEFT : JButton.RIGHT);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    protected void setSelectedIndex(int index) {&#13;&#10;        int size = getComponentCount();&#13;&#10;        for (int i = 0; i &lt; size; i++) {&#13;&#10;            Component com = getComponent(i);&#13;&#10;            if (com instanceof JButton) {&#13;&#10;                ((JButton) com).setSelected(i == index - 1);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void paintComponent(Graphics g) {&#13;&#10;        super.paintComponent(g);&#13;&#10;        Graphics2D g2 = (Graphics2D) g.create();&#13;&#10;        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#13;&#10;        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);&#13;&#10;        int ssubMenuItemHeight = UIScale.scale(subMenuItemHeight);&#13;&#10;        int ssubMenuLeftGap = UIScale.scale(subMenuLeftGap);&#13;&#10;        Path2D.Double p = new Path2D.Double();&#13;&#10;        int last = getComponent(getComponentCount() - 1).getY() + (ssubMenuItemHeight / 2);&#13;&#10;        boolean ltr = getComponentOrientation().isLeftToRight();&#13;&#10;        int round = UIScale.scale(10);&#13;&#10;        int x = ltr ? (ssubMenuLeftGap - round) : (getWidth() - (ssubMenuLeftGap - round));&#13;&#10;        p.moveTo(x, 0);&#13;&#10;        p.lineTo(x, last - round);&#13;&#10;        for (int i = 0; i &lt; getComponentCount(); i++) {&#13;&#10;            int com = getComponent(i).getY() + (ssubMenuItemHeight / 2);&#13;&#10;            p.append(createCurve(round, x, com, ltr), false);&#13;&#10;        }&#13;&#10;        g2.setColor(getForeground());&#13;&#10;        g2.setStroke(new BasicStroke(UIScale.scale(1f)));&#13;&#10;        g2.draw(p);&#13;&#10;        g2.dispose();&#13;&#10;    }&#13;&#10;&#13;&#10;    private Shape createCurve(int round, int x, int y, boolean ltr) {&#13;&#10;        Path2D p2 = new Path2D.Double();&#13;&#10;        p2.moveTo(x, y - round);&#13;&#10;        p2.curveTo(x, y - round, x, y, x + (ltr ? round : -round), y);&#13;&#10;        return p2;&#13;&#10;    }&#13;&#10;&#13;&#10;    private class MenuLayout implements LayoutManager {&#13;&#10;&#13;&#10;        @Override&#13;&#10;        public void addLayoutComponent(String name, Component comp) {&#13;&#10;        }&#13;&#10;&#13;&#10;        @Override&#13;&#10;        public void removeLayoutComponent(Component comp) {&#13;&#10;        }&#13;&#10;&#13;&#10;        @Override&#13;&#10;        public Dimension preferredLayoutSize(Container parent) {&#13;&#10;            synchronized (parent.getTreeLock()) {&#13;&#10;                Insets insets = parent.getInsets();&#13;&#10;                int maxWidth = UIScale.scale(150);&#13;&#10;                int ssubMenuLeftGap = UIScale.scale(subMenuLeftGap);&#13;&#10;                int width = getMaxWidth(parent) + ssubMenuLeftGap;&#13;&#10;                int height = (insets.top + insets.bottom);&#13;&#10;                int size = parent.getComponentCount();&#13;&#10;                for (int i = 0; i &lt; size; i++) {&#13;&#10;                    Component com = parent.getComponent(i);&#13;&#10;                    if (com.isVisible()) {&#13;&#10;                        height += UIScale.scale(subMenuItemHeight);&#13;&#10;                        width = Math.max(width, com.getPreferredSize().width);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;                width += insets.left + insets.right;&#13;&#10;                return new Dimension(Math.max(width, maxWidth), height);&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        @Override&#13;&#10;        public Dimension minimumLayoutSize(Container parent) {&#13;&#10;            synchronized (parent.getTreeLock()) {&#13;&#10;                return new Dimension(0, 0);&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        @Override&#13;&#10;        public void layoutContainer(Container parent) {&#13;&#10;            synchronized (parent.getTreeLock()) {&#13;&#10;                boolean ltr = parent.getComponentOrientation().isLeftToRight();&#13;&#10;                Insets insets = parent.getInsets();&#13;&#10;                int ssubMenuLeftGap = UIScale.scale(subMenuLeftGap);&#13;&#10;                int ssubMenuItemHeight = UIScale.scale(subMenuItemHeight);&#13;&#10;                int x = insets.left + (ltr ? ssubMenuLeftGap : 0);&#13;&#10;                int y = insets.top;&#13;&#10;                int width = getMaxWidth(parent);&#13;&#10;                int size = parent.getComponentCount();&#13;&#10;                for (int i = 0; i &lt; size; i++) {&#13;&#10;                    Component com = parent.getComponent(i);&#13;&#10;                    if (com.isVisible()) {&#13;&#10;                        com.setBounds(x, y, width, ssubMenuItemHeight);&#13;&#10;                        y += ssubMenuItemHeight;&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        private int getMaxWidth(Container parent) {&#13;&#10;            int size = parent.getComponentCount();&#13;&#10;            int maxWidth = UIScale.scale(150);&#13;&#10;            int max = 0;&#13;&#10;            for (int i = 0; i &lt; size; i++) {&#13;&#10;                Component com = parent.getComponent(i);&#13;&#10;                if (com.isVisible()) {&#13;&#10;                    max = Math.max(max, com.getPreferredSize().width);&#13;&#10;                }&#13;&#10;            }&#13;&#10;            return Math.max(max, maxWidth);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/vn/edu/iuh/fit/iuhpharmacitymanagement/gui/staff/form/MainForm.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/vn/edu/iuh/fit/iuhpharmacitymanagement/gui/staff/form/MainForm.java" />
              <option name="originalContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.form;&#10;&#10;import com.formdev.flatlaf.FlatClientProperties;&#10;import com.formdev.flatlaf.extras.FlatSVGIcon;&#10;import com.formdev.flatlaf.util.UIScale;&#10;import java.awt.BorderLayout;&#10;import java.awt.Component;&#10;import java.awt.ComponentOrientation;&#10;import java.awt.Container;&#10;import java.awt.Dimension;&#10;import java.awt.Insets;&#10;import java.awt.LayoutManager;&#10;import java.awt.event.ActionEvent;&#10;import javax.swing.JButton;&#10;import javax.swing.JLayeredPane;&#10;import javax.swing.JPanel;&#10;import javax.swing.border.EmptyBorder;&#10;import vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.form.other.FormInbox;&#10;import vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.form.other.FormRead;&#10;import vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.menu.Menu;&#10;&#10;/**&#10; *&#10; * @author PhamTra&#10; */&#10;public class MainForm extends JLayeredPane {&#10;&#10;    public MainForm() {&#10;        init();&#10;    }&#10;&#10;    private void init() {&#10;        setBorder(new EmptyBorder(0, 0, 0, 0));&#10;        setLayout(new MainFormLayout());&#10;        setBackground(java.awt.Color.WHITE);&#10;        putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;background:#FFFFFF;&quot;&#10;                + &quot;border:0,0,0,0&quot;);&#10;        menu = new Menu();&#10;        panelBody = new JPanel(new BorderLayout());&#10;        panelBody.setBackground(java.awt.Color.WHITE);&#10;        // Thay đổi viền từ xám thành trắng hoặc loại bỏ hoàn toàn&#10;        panelBody.setBorder(null); // Loại bỏ viền xám&#10;        panelBody.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;background:#FFFFFF;&quot;&#10;                + &quot;border:0,0,0,0&quot;); // Loại bỏ viền&#10;        initMenuArrowIcon();&#10;        menuButton.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;background:#D3D3D3;&quot;&#10;                + &quot;arc:999;&quot;&#10;                + &quot;focusWidth:0;&quot;&#10;                + &quot;borderWidth:0;&quot;&#10;                + &quot;shadow:false&quot;);&#10;        menuButton.addActionListener((ActionEvent e) -&gt; {&#10;            setMenuFull(!menu.isMenuFull());&#10;        });&#10;//        initMenuEvent();&#10;        setLayer(menuButton, JLayeredPane.POPUP_LAYER);&#10;        add(menuButton);&#10;        add(menu);&#10;        add(panelBody);&#10;    }&#10;&#10;    @Override&#10;    public void applyComponentOrientation(ComponentOrientation o) {&#10;        super.applyComponentOrientation(o);&#10;        initMenuArrowIcon();&#10;    }&#10;&#10;    private void initMenuArrowIcon() {&#10;        if (menuButton == null) {&#10;            menuButton = new JButton();&#10;        }&#10;        String icon = (getComponentOrientation().isLeftToRight()) ? &quot;menu_left.svg&quot; : &quot;menu_right.svg&quot;;&#10;        FlatSVGIcon svgIcon = new FlatSVGIcon(&quot;icon/svg/&quot; + icon, 0.8f);&#10;        FlatSVGIcon.ColorFilter colorFilter = new FlatSVGIcon.ColorFilter();&#10;        // Icon màu đen&#10;        colorFilter.add(java.awt.Color.decode(&quot;#969696&quot;), java.awt.Color.BLACK);&#10;        svgIcon.setColorFilter(colorFilter);&#10;        menuButton.setIcon(svgIcon);&#10;    }&#10;&#10;//    private void initMenuEvent() {&#10;//        menu.addMenuEvent((int index, int subIndex, MenuAction action) -&gt; {&#10;//            // Application.mainForm.showForm(new DefaultForm(&quot;Form : &quot; + index + &quot; &quot; + subIndex));&#10;//            if (index == 0) {&#10;//                MenuForm.showForm(new FormDashboard());&#10;//            } else if (index == 1) {&#10;//                if (subIndex == 1) {&#10;//                    MenuForm.showForm(new FormInbox());&#10;//                } else if (subIndex == 2) {&#10;//                    MenuForm.showForm(new FormRead());&#10;//                } else {&#10;//                    action.cancel();&#10;//                }&#10;//            } else if (index == 9) {&#10;//                MenuForm.logout();&#10;//            } else {&#10;//                action.cancel();&#10;//            }&#10;//        });&#10;//    }&#10;    private void setMenuFull(boolean full) {&#10;        String icon;&#10;        if (getComponentOrientation().isLeftToRight()) {&#10;            icon = (full) ? &quot;menu_left.svg&quot; : &quot;menu_right.svg&quot;;&#10;        } else {&#10;            icon = (full) ? &quot;menu_right.svg&quot; : &quot;menu_left.svg&quot;;&#10;        }&#10;        FlatSVGIcon svgIcon = new FlatSVGIcon(&quot;icon/svg/&quot; + icon, 0.8f);&#10;        FlatSVGIcon.ColorFilter colorFilter = new FlatSVGIcon.ColorFilter();&#10;        // Icon màu đen&#10;        colorFilter.add(java.awt.Color.decode(&quot;#969696&quot;), java.awt.Color.BLACK);&#10;        svgIcon.setColorFilter(colorFilter);&#10;        menuButton.setIcon(svgIcon);&#10;        menu.setMenuFull(full);&#10;        revalidate();&#10;    }&#10;&#10;    public void hideMenu() {&#10;        menu.hideMenuItem();&#10;    }&#10;&#10;    public void showForm(Component component) {&#10;        panelBody.removeAll();&#10;        panelBody.add(component);&#10;        panelBody.repaint();&#10;        panelBody.revalidate();&#10;    }&#10;&#10;    public void setSelectedMenu(int index, int subIndex) {&#10;        menu.setSelectedMenu(index, subIndex);&#10;    }&#10;&#10;    private Menu menu;&#10;    private JPanel panelBody;&#10;    private JButton menuButton;&#10;&#10;    private class MainFormLayout implements LayoutManager {&#10;&#10;        @Override&#10;        public void addLayoutComponent(String name, Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public void removeLayoutComponent(Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public Dimension preferredLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(5, 5);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public Dimension minimumLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(0, 0);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void layoutContainer(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                boolean ltr = parent.getComponentOrientation().isLeftToRight();&#10;                Insets insets = UIScale.scale(parent.getInsets());&#10;                int x = insets.left;&#10;                int y = 0; // Menu bắt đầu từ y = 0 để tràn lên trên cùng&#10;                int width = parent.getWidth() - (insets.left + insets.right);&#10;                int height = parent.getHeight(); // Sử dụng toàn bộ chiều cao&#10;                int menuWidth = UIScale.scale(menu.isMenuFull() ? menu.getMenuMaxWidth() : menu.getMenuMinWidth());&#10;                int menuX = ltr ? x : x + width - menuWidth;&#10;                menu.setBounds(menuX, y, menuWidth, height); // Menu tràn từ trên xuống dưới&#10;&#10;                int menuButtonWidth = menuButton.getPreferredSize().width;&#10;                int menuButtonHeight = menuButton.getPreferredSize().height;&#10;                int menubX;&#10;                if (ltr) {&#10;                    menubX = (int) (x + menuWidth - (menuButtonWidth * (menu.isMenuFull() ? 0.5f : 0.3f)));&#10;                } else {&#10;                    menubX = (int) (menuX - (menuButtonWidth * (menu.isMenuFull() ? 0.5f : 0.7f)));&#10;                }&#10;                menuButton.setBounds(menubX, UIScale.scale(35), menuButtonWidth, menuButtonHeight); // Đặt button menu cách top 35px&#10;&#10;                int gap = UIScale.scale(5);&#10;                int bodyWidth = width - menuWidth - gap;&#10;                int bodyHeight = height - UIScale.scale(5);&#10;                int bodyx = ltr ? (x + menuWidth + gap) : x;&#10;                int bodyy = UIScale.scale(5);&#10;                panelBody.setBounds(bodyx, bodyy, bodyWidth, bodyHeight);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.form;&#10;&#10;import com.formdev.flatlaf.FlatClientProperties;&#10;import com.formdev.flatlaf.extras.FlatSVGIcon;&#10;import com.formdev.flatlaf.util.UIScale;&#10;import java.awt.BorderLayout;&#10;import java.awt.Component;&#10;import java.awt.ComponentOrientation;&#10;import java.awt.Container;&#10;import java.awt.Dimension;&#10;import java.awt.Insets;&#10;import java.awt.LayoutManager;&#10;import java.awt.event.ActionEvent;&#10;import javax.swing.JButton;&#10;import javax.swing.JLayeredPane;&#10;import javax.swing.JPanel;&#10;import javax.swing.border.EmptyBorder;&#10;import vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.form.other.FormInbox;&#10;import vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.form.other.FormRead;&#10;import vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.menu.Menu;&#10;&#10;/**&#10; *&#10; * @author PhamTra&#10; */&#10;public class MainForm extends JLayeredPane {&#10;&#10;    public MainForm() {&#10;        init();&#10;    }&#10;&#10;    private void init() {&#10;        setBorder(new EmptyBorder(0, 0, 0, 0));&#10;        setLayout(new MainFormLayout());&#10;        setBackground(java.awt.Color.WHITE);&#10;        putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;background:#FFFFFF;&quot;&#10;                + &quot;border:0,0,0,0&quot;);&#10;        menu = new Menu();&#10;        panelBody = new JPanel(new BorderLayout());&#10;        panelBody.setBackground(java.awt.Color.WHITE);&#10;        // Thay đổi viền từ xám thành trắng hoặc loại bỏ hoàn toàn&#10;        panelBody.setBorder(null); // Loại bỏ viền xám&#10;        panelBody.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;background:#FFFFFF;&quot;&#10;                + &quot;border:0,0,0,0&quot;); // Loại bỏ viền&#10;        initMenuArrowIcon();&#10;        menuButton.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;background:#D3D3D3;&quot;&#10;                + &quot;arc:999;&quot;&#10;                + &quot;focusWidth:0;&quot;&#10;                + &quot;borderWidth:0;&quot;&#10;                + &quot;shadow:false&quot;);&#10;        menuButton.addActionListener((ActionEvent e) -&gt; {&#10;            setMenuFull(!menu.isMenuFull());&#10;        });&#10;//        initMenuEvent();&#10;        setLayer(menuButton, JLayeredPane.POPUP_LAYER);&#10;        add(menuButton);&#10;        add(menu);&#10;        add(panelBody);&#10;    }&#10;&#10;    @Override&#10;    public void applyComponentOrientation(ComponentOrientation o) {&#10;        super.applyComponentOrientation(o);&#10;        initMenuArrowIcon();&#10;    }&#10;&#10;    private void initMenuArrowIcon() {&#10;        if (menuButton == null) {&#10;            menuButton = new JButton();&#10;        }&#10;        String icon = (getComponentOrientation().isLeftToRight()) ? &quot;menu_left.svg&quot; : &quot;menu_right.svg&quot;;&#10;        FlatSVGIcon svgIcon = new FlatSVGIcon(&quot;icon/svg/&quot; + icon, 0.8f);&#10;        FlatSVGIcon.ColorFilter colorFilter = new FlatSVGIcon.ColorFilter();&#10;        // Icon màu đen&#10;        colorFilter.add(java.awt.Color.decode(&quot;#969696&quot;), java.awt.Color.BLACK);&#10;        svgIcon.setColorFilter(colorFilter);&#10;        menuButton.setIcon(svgIcon);&#10;    }&#10;&#10;//    private void initMenuEvent() {&#10;//        menu.addMenuEvent((int index, int subIndex, MenuAction action) -&gt; {&#10;//            // Application.mainForm.showForm(new DefaultForm(&quot;Form : &quot; + index + &quot; &quot; + subIndex));&#10;//            if (index == 0) {&#10;//                MenuForm.showForm(new FormDashboard());&#10;//            } else if (index == 1) {&#10;//                if (subIndex == 1) {&#10;//                    MenuForm.showForm(new FormInbox());&#10;//                } else if (subIndex == 2) {&#10;//                    MenuForm.showForm(new FormRead());&#10;//                } else {&#10;//                    action.cancel();&#10;//                }&#10;//            } else if (index == 9) {&#10;//                MenuForm.logout();&#10;//            } else {&#10;//                action.cancel();&#10;//            }&#10;//        });&#10;//    }&#10;    private void setMenuFull(boolean full) {&#10;        String icon;&#10;        if (getComponentOrientation().isLeftToRight()) {&#10;            icon = (full) ? &quot;menu_left.svg&quot; : &quot;menu_right.svg&quot;;&#10;        } else {&#10;            icon = (full) ? &quot;menu_right.svg&quot; : &quot;menu_left.svg&quot;;&#10;        }&#10;        FlatSVGIcon svgIcon = new FlatSVGIcon(&quot;icon/svg/&quot; + icon, 0.8f);&#10;        FlatSVGIcon.ColorFilter colorFilter = new FlatSVGIcon.ColorFilter();&#10;        // Icon màu đen&#10;        colorFilter.add(java.awt.Color.decode(&quot;#969696&quot;), java.awt.Color.BLACK);&#10;        svgIcon.setColorFilter(colorFilter);&#10;        menuButton.setIcon(svgIcon);&#10;        menu.setMenuFull(full);&#10;        revalidate();&#10;    }&#10;&#10;    public void hideMenu() {&#10;        menu.hideMenuItem();&#10;    }&#10;&#10;    public void showForm(Component component) {&#10;        panelBody.removeAll();&#10;        panelBody.add(component);&#10;        panelBody.repaint();&#10;        panelBody.revalidate();&#10;    }&#10;&#10;    public void setSelectedMenu(int index, int subIndex) {&#10;        menu.setSelectedMenu(index, subIndex);&#10;    }&#10;&#10;    private Menu menu;&#10;    private JPanel panelBody;&#10;    private JButton menuButton;&#10;&#10;    private class MainFormLayout implements LayoutManager {&#10;&#10;        @Override&#10;        public void addLayoutComponent(String name, Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public void removeLayoutComponent(Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public Dimension preferredLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(5, 5);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public Dimension minimumLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(0, 0);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void layoutContainer(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                boolean ltr = parent.getComponentOrientation().isLeftToRight();&#10;                Insets insets = UIScale.scale(parent.getInsets());&#10;                int x = insets.left;&#10;                int y = 0; // Menu bắt đầu từ y = 0 để tràn lên trên cùng&#10;                int width = parent.getWidth() - (insets.left + insets.right);&#10;                int height = parent.getHeight(); // Sử dụng toàn bộ chiều cao&#10;                int menuWidth = UIScale.scale(menu.isMenuFull() ? menu.getMenuMaxWidth() : menu.getMenuMinWidth()) + UIScale.scale(20); // Tăng width để chứa margin&#10;                int menuX = ltr ? x : x + width - menuWidth;&#10;                menu.setBounds(menuX, y, menuWidth, height); // Menu tràn từ trên xuống dưới&#10;&#10;                int menuButtonWidth = menuButton.getPreferredSize().width;&#10;                int menuButtonHeight = menuButton.getPreferredSize().height;&#10;                int menubX;&#10;                if (ltr) {&#10;                    menubX = (int) (x + menuWidth - (menuButtonWidth * (menu.isMenuFull() ? 0.5f : 0.3f))) - UIScale.scale(10); // Điều chỉnh vị trí button&#10;                } else {&#10;                    menubX = (int) (menuX - (menuButtonWidth * (menu.isMenuFull() ? 0.5f : 0.7f))) + UIScale.scale(10);&#10;                }&#10;                menuButton.setBounds(menubX, UIScale.scale(35), menuButtonWidth, menuButtonHeight); // Đặt button menu cách top 35px&#10;&#10;                int gap = UIScale.scale(5);&#10;                int bodyWidth = width - menuWidth - gap;&#10;                int bodyHeight = height - UIScale.scale(5);&#10;                int bodyx = ltr ? (x + menuWidth + gap) : x;&#10;                int bodyy = UIScale.scale(5);&#10;                panelBody.setBounds(bodyx, bodyy, bodyWidth, bodyHeight);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/vn/edu/iuh/fit/iuhpharmacitymanagement/gui/staff/menu/Menu.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/vn/edu/iuh/fit/iuhpharmacitymanagement/gui/staff/menu/Menu.java" />
              <option name="originalContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.menu;&#10;&#10;import com.formdev.flatlaf.FlatClientProperties;&#10;import com.formdev.flatlaf.extras.FlatSVGIcon;&#10;import com.formdev.flatlaf.ui.FlatUIUtils;&#10;import com.formdev.flatlaf.util.UIScale;&#10;import java.awt.Component;&#10;import java.awt.Container;&#10;import java.awt.Dimension;&#10;import java.awt.Insets;&#10;import java.awt.LayoutManager;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import javax.swing.ImageIcon;&#10;import javax.swing.JLabel;&#10;import javax.swing.JPanel;&#10;import javax.swing.JScrollBar;&#10;import javax.swing.JScrollPane;&#10;&#10;/**&#10; *&#10; * @author PhamTra&#10; */&#10;public class Menu extends JPanel {&#10;&#10;    private final String menuItems[][] = {&#10;        {&quot;~MAIN~&quot;},&#10;        {&quot;Dashboard&quot;},&#10;        {&quot;~MENU~&quot;},&#10;        {&quot;1&quot;, &quot;1.1&quot;, &quot;1.2&quot;, &quot;1.3&quot;},&#10;        {&quot;2&quot;},&#10;        {&quot;3&quot;},&#10;        {&quot;~QUẢN LÝ~&quot;},&#10;        {&quot;Quản lý khách hàng&quot;, &quot;4.1&quot;, &quot;4.2&quot;, &quot;4.3&quot;, &quot;4.4&quot;},&#10;        {&quot;5&quot;, &quot;5.1&quot;, &quot;5.2&quot;, &quot;5.3&quot;, &quot;5.4&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;~BÁO CÁO~&quot;},&#10;        {&quot;6&quot;, &quot;6.1&quot;, &quot;6.2&quot;, &quot;6.3&quot;, &quot;6.4&quot;},&#10;        {&quot;7&quot;, &quot;7.1&quot;, &quot;7.2&quot;, &quot;7.3&quot;},&#10;        {&quot;8&quot;, &quot;8.1&quot;, &quot;8.2&quot;, &quot;8.3&quot;, &quot;8.4&quot;, &quot;8.5&quot;, &quot;8.6&quot;, &quot;8.7&quot;},&#10;        {&quot;Logout&quot;}&#10;    };&#10;&#10;    public boolean isMenuFull() {&#10;        return menuFull;&#10;    }&#10;&#10;    public void setMenuFull(boolean menuFull) {&#10;        this.menuFull = menuFull;&#10;        if (menuFull) {&#10;            header.setText(headerName);&#10;            header.setHorizontalAlignment(getComponentOrientation().isLeftToRight() ? JLabel.LEFT : JLabel.RIGHT);&#10;        } else {&#10;            header.setText(&quot;&quot;);&#10;            header.setHorizontalAlignment(JLabel.CENTER);&#10;        }&#10;        // Đảm bảo header luôn màu trắng&#10;        header.setForeground(java.awt.Color.WHITE);&#10;&#10;        for (Component com : panelMenu.getComponents()) {&#10;            if (com instanceof MenuItem) {&#10;                ((MenuItem) com).setFull(menuFull);&#10;            }&#10;        }&#10;    }&#10;&#10;    private final List&lt;MenuEvent&gt; events = new ArrayList&lt;&gt;();&#10;    private boolean menuFull = true;&#10;    private final String headerName = &quot;IUH PHARMACITY&quot;;&#10;&#10;    protected final boolean hideMenuTitleOnMinimum = true;&#10;    protected final int menuTitleLeftInset = 5;&#10;    protected final int menuTitleVgap = 5;&#10;    protected final int menuMaxWidth = 300; // Tăng từ 250 lên 300&#10;    protected final int menuMinWidth = 80; // Tăng từ 60 lên 80&#10;    protected final int headerFullHgap = 5;&#10;&#10;    public Menu() {&#10;        init();&#10;    }&#10;&#10;    private void init() {&#10;        setLayout(new MenuLayout());&#10;        // Đặt màu nền cố định cho menu - sửa màu để nhất quán&#10;        setBackground(java.awt.Color.decode(&quot;#00385C&quot;));&#10;        putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;border:0,0,0,0;&quot; // Loại bỏ tất cả border để menu có thể tràn lên trên&#10;                + &quot;background:#00385C;&quot; // Sửa màu từ #1E3A5F thành #00385C&#10;                + &quot;arc:0,0,15,15;&quot; // Chỉ bo góc dưới đẹp hơn&#10;                + &quot;shadow:false&quot;); // Loại bỏ shadow&#10;        header = new JLabel(headerName);&#10;        // Tạm thời bỏ icon để tránh lỗi&#10;        header.setForeground(java.awt.Color.WHITE);&#10;        header.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;font:$Menu.header.font;&quot;&#10;                + &quot;foreground:#FFFFFF&quot;);&#10;&#10;        //  Menu&#10;        scroll = new JScrollPane();&#10;        panelMenu = new JPanel(new MenuItemLayout(this));&#10;        panelMenu.setBackground(java.awt.Color.decode(&quot;#00385C&quot;));&#10;        panelMenu.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;border:2,2,2,2;&quot; // Giảm padding&#10;                + &quot;background:#00385C&quot;);&#10;&#10;        scroll.setViewportView(panelMenu);&#10;        scroll.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;border:null;&quot;&#10;                + &quot;shadow:false&quot;); // Loại bỏ shadow cho scroll&#10;        JScrollBar vscroll = scroll.getVerticalScrollBar();&#10;        vscroll.setUnitIncrement(10);&#10;        // Loại bỏ styling để tránh lỗi với Java 24&#10;        // vscroll.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;);&#10;        createMenu();&#10;        add(header);&#10;        add(scroll);&#10;    }&#10;&#10;    private void createMenu() {&#10;        int index = 0;&#10;        for (int i = 0; i &lt; menuItems.length; i++) {&#10;            String menuName = menuItems[i][0];&#10;            if (menuName.startsWith(&quot;~&quot;) &amp;&amp; menuName.endsWith(&quot;~&quot;)) {&#10;                panelMenu.add(createTitle(menuName));&#10;            } else {&#10;                MenuItem menuItem = new MenuItem(this, menuItems[i], index++, events);&#10;                panelMenu.add(menuItem);&#10;            }&#10;        }&#10;        // các icon trong menu ghi theo dạng [số]+[tên] cho dễ chia&#10;        // vd: 1-hehe, không ghi 01&#10;        // icon tải về dùng đuôi svg để đỡ sửa lại w và h&#10;    }&#10;&#10;    private JLabel createTitle(String title) {&#10;        String menuName = title.substring(1, title.length() - 1);&#10;        JLabel lbTitle = new JLabel(menuName);&#10;        // Đặt màu trắng cố định cho tiêu đề&#10;        lbTitle.setForeground(java.awt.Color.WHITE);&#10;        lbTitle.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;font:$Menu.label.font;&quot;&#10;                + &quot;foreground:#FFFFFF&quot;);&#10;        return lbTitle;&#10;    }&#10;&#10;    public void setSelectedMenu(int index, int subIndex) {&#10;        runEvent(index, subIndex);&#10;    }&#10;&#10;    protected void setSelected(int index, int subIndex) {&#10;        int size = panelMenu.getComponentCount();&#10;        for (int i = 0; i &lt; size; i++) {&#10;            Component com = panelMenu.getComponent(i);&#10;            if (com instanceof MenuItem) {&#10;                MenuItem item = (MenuItem) com;&#10;                if (item.getMenuIndex() == index) {&#10;                    item.setSelectedIndex(subIndex);&#10;                } else {&#10;                    item.setSelectedIndex(-1);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    protected void runEvent(int index, int subIndex) {&#10;        MenuAction menuAction = new MenuAction();&#10;        for (MenuEvent event : events) {&#10;            event.menuSelected(index, subIndex, menuAction);&#10;        }&#10;        if (!menuAction.isCancel()) {&#10;            setSelected(index, subIndex);&#10;        }&#10;    }&#10;&#10;    public void addMenuEvent(MenuEvent event) {&#10;        events.add(event);&#10;    }&#10;&#10;    public void hideMenuItem() {&#10;        for (Component com : panelMenu.getComponents()) {&#10;            if (com instanceof MenuItem) {&#10;                ((MenuItem) com).hideMenuItem();&#10;            }&#10;        }&#10;        revalidate();&#10;    }&#10;&#10;    public boolean isHideMenuTitleOnMinimum() {&#10;        return hideMenuTitleOnMinimum;&#10;    }&#10;&#10;    public int getMenuTitleLeftInset() {&#10;        return menuTitleLeftInset;&#10;    }&#10;&#10;    public int getMenuTitleVgap() {&#10;        return menuTitleVgap;&#10;    }&#10;&#10;    public int getMenuMaxWidth() {&#10;        return menuMaxWidth;&#10;    }&#10;&#10;    public int getMenuMinWidth() {&#10;        return menuMinWidth;&#10;    }&#10;&#10;    private JLabel header;&#10;    private JScrollPane scroll;&#10;    private JPanel panelMenu;&#10;&#10;    private class MenuLayout implements LayoutManager {&#10;&#10;        @Override&#10;        public void addLayoutComponent(String name, Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public void removeLayoutComponent(Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public Dimension preferredLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(5, 5);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public Dimension minimumLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(0, 0);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void layoutContainer(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                Insets insets = parent.getInsets();&#10;                int x = insets.left;&#10;                int y = UIScale.scale(30); // Bắt đầu từ 30px để tránh chạm các nút điều khiển cửa sổ&#10;                int gap = UIScale.scale(3); // Giảm gap&#10;                int sheaderFullHgap = UIScale.scale(headerFullHgap);&#10;                int width = parent.getWidth() - (insets.left + insets.right);&#10;                int height = parent.getHeight() - y - insets.bottom; // Điều chỉnh chiều cao&#10;                int iconWidth = width;&#10;                int iconHeight = header.getPreferredSize().height;&#10;                int hgap = menuFull ? sheaderFullHgap : 0;&#10;&#10;                header.setBounds(x + hgap, y, iconWidth - (hgap * 2), iconHeight);&#10;&#10;                int menux = x;&#10;                int menuy = y + iconHeight + gap;&#10;                int menuWidth = width;&#10;                int menuHeight = height - (iconHeight + gap);&#10;                scroll.setBounds(menux, menuy, menuWidth, menuHeight);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package vn.edu.iuh.fit.iuhpharmacitymanagement.gui.staff.menu;&#10;&#10;import com.formdev.flatlaf.FlatClientProperties;&#10;import com.formdev.flatlaf.extras.FlatSVGIcon;&#10;import com.formdev.flatlaf.ui.FlatUIUtils;&#10;import com.formdev.flatlaf.util.UIScale;&#10;import java.awt.Component;&#10;import java.awt.Container;&#10;import java.awt.Dimension;&#10;import java.awt.Insets;&#10;import java.awt.LayoutManager;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import javax.swing.ImageIcon;&#10;import javax.swing.JLabel;&#10;import javax.swing.JPanel;&#10;import javax.swing.JScrollBar;&#10;import javax.swing.JScrollPane;&#10;&#10;/**&#10; *&#10; * @author PhamTra&#10; */&#10;public class Menu extends JPanel {&#10;&#10;    private final String menuItems[][] = {&#10;        {&quot;~MAIN~&quot;},&#10;        {&quot;Dashboard&quot;},&#10;        {&quot;~MENU~&quot;},&#10;        {&quot;1&quot;, &quot;1.1&quot;, &quot;1.2&quot;, &quot;1.3&quot;},&#10;        {&quot;2&quot;},&#10;        {&quot;3&quot;},&#10;        {&quot;~QUẢN LÝ~&quot;},&#10;        {&quot;Quản lý khách hàng&quot;, &quot;4.1&quot;, &quot;4.2&quot;, &quot;4.3&quot;, &quot;4.4&quot;},&#10;        {&quot;5&quot;, &quot;5.1&quot;, &quot;5.2&quot;, &quot;5.3&quot;, &quot;5.4&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;Test&quot;, &quot;ok&quot;},&#10;        {&quot;~BÁO CÁO~&quot;},&#10;        {&quot;6&quot;, &quot;6.1&quot;, &quot;6.2&quot;, &quot;6.3&quot;, &quot;6.4&quot;},&#10;        {&quot;7&quot;, &quot;7.1&quot;, &quot;7.2&quot;, &quot;7.3&quot;},&#10;        {&quot;8&quot;, &quot;8.1&quot;, &quot;8.2&quot;, &quot;8.3&quot;, &quot;8.4&quot;, &quot;8.5&quot;, &quot;8.6&quot;, &quot;8.7&quot;},&#10;        {&quot;Logout&quot;}&#10;    };&#10;&#10;    public boolean isMenuFull() {&#10;        return menuFull;&#10;    }&#10;&#10;    public void setMenuFull(boolean menuFull) {&#10;        this.menuFull = menuFull;&#10;        if (menuFull) {&#10;            header.setText(headerName);&#10;            header.setHorizontalAlignment(getComponentOrientation().isLeftToRight() ? JLabel.LEFT : JLabel.RIGHT);&#10;        } else {&#10;            header.setText(&quot;&quot;);&#10;            header.setHorizontalAlignment(JLabel.CENTER);&#10;        }&#10;        // Đảm bảo header luôn màu trắng&#10;        header.setForeground(java.awt.Color.WHITE);&#10;&#10;        for (Component com : panelMenu.getComponents()) {&#10;            if (com instanceof MenuItem) {&#10;                ((MenuItem) com).setFull(menuFull);&#10;            }&#10;        }&#10;    }&#10;&#10;    private final List&lt;MenuEvent&gt; events = new ArrayList&lt;&gt;();&#10;    private boolean menuFull = true;&#10;    private final String headerName = &quot;IUH PHARMACITY&quot;;&#10;&#10;    protected final boolean hideMenuTitleOnMinimum = true;&#10;    protected final int menuTitleLeftInset = 5;&#10;    protected final int menuTitleVgap = 5;&#10;    protected final int menuMaxWidth = 300; // Tăng từ 250 lên 300&#10;    protected final int menuMinWidth = 80; // Tăng từ 60 lên 80&#10;    protected final int headerFullHgap = 5;&#10;&#10;    public Menu() {&#10;        init();&#10;    }&#10;&#10;    private void init() {&#10;        setLayout(new MenuLayout());&#10;        // Đặt màu nền cố định cho menu - sửa màu để nhất quán&#10;        setBackground(java.awt.Color.decode(&quot;#00385C&quot;));&#10;        putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;border:0,0,0,0;&quot; // Loại bỏ tất cả border để menu có thể tràn lên trên&#10;                + &quot;background:#00385C;&quot; // Sửa màu từ #1E3A5F thành #00385C&#10;                + &quot;arc:0,20,20,0;&quot; // Bo góc phải trên và phải dưới&#10;                + &quot;shadow:false&quot;); // Loại bỏ shadow&#10;        header = new JLabel(headerName);&#10;        // Tạm thời bỏ icon để tránh lỗi&#10;        header.setForeground(java.awt.Color.WHITE);&#10;        header.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;font:$Menu.header.font;&quot;&#10;                + &quot;foreground:#FFFFFF&quot;);&#10;&#10;        //  Menu&#10;        scroll = new JScrollPane();&#10;        panelMenu = new JPanel(new MenuItemLayout(this));&#10;        panelMenu.setBackground(java.awt.Color.decode(&quot;#00385C&quot;));&#10;        panelMenu.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;border:2,2,2,2;&quot; // Giảm padding&#10;                + &quot;background:#00385C&quot;);&#10;&#10;        scroll.setViewportView(panelMenu);&#10;        scroll.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;border:null;&quot;&#10;                + &quot;shadow:false&quot;); // Loại bỏ shadow cho scroll&#10;        JScrollBar vscroll = scroll.getVerticalScrollBar();&#10;        vscroll.setUnitIncrement(10);&#10;        // Loại bỏ styling để tránh lỗi với Java 24&#10;        // vscroll.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;);&#10;        createMenu();&#10;        add(header);&#10;        add(scroll);&#10;    }&#10;&#10;    private void createMenu() {&#10;        int index = 0;&#10;        for (int i = 0; i &lt; menuItems.length; i++) {&#10;            String menuName = menuItems[i][0];&#10;            if (menuName.startsWith(&quot;~&quot;) &amp;&amp; menuName.endsWith(&quot;~&quot;)) {&#10;                panelMenu.add(createTitle(menuName));&#10;            } else {&#10;                MenuItem menuItem = new MenuItem(this, menuItems[i], index++, events);&#10;                panelMenu.add(menuItem);&#10;            }&#10;        }&#10;        // các icon trong menu ghi theo dạng [số]+[tên] cho dễ chia&#10;        // vd: 1-hehe, không ghi 01&#10;        // icon tải về dùng đuôi svg để đỡ sửa lại w và h&#10;    }&#10;&#10;    private JLabel createTitle(String title) {&#10;        String menuName = title.substring(1, title.length() - 1);&#10;        JLabel lbTitle = new JLabel(menuName);&#10;        // Đặt màu trắng cố định cho tiêu đề&#10;        lbTitle.setForeground(java.awt.Color.WHITE);&#10;        lbTitle.putClientProperty(FlatClientProperties.STYLE, &quot;&quot;&#10;                + &quot;font:$Menu.label.font;&quot;&#10;                + &quot;foreground:#FFFFFF&quot;);&#10;        return lbTitle;&#10;    }&#10;&#10;    public void setSelectedMenu(int index, int subIndex) {&#10;        runEvent(index, subIndex);&#10;    }&#10;&#10;    protected void setSelected(int index, int subIndex) {&#10;        int size = panelMenu.getComponentCount();&#10;        for (int i = 0; i &lt; size; i++) {&#10;            Component com = panelMenu.getComponent(i);&#10;            if (com instanceof MenuItem) {&#10;                MenuItem item = (MenuItem) com;&#10;                if (item.getMenuIndex() == index) {&#10;                    item.setSelectedIndex(subIndex);&#10;                } else {&#10;                    item.setSelectedIndex(-1);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    protected void runEvent(int index, int subIndex) {&#10;        MenuAction menuAction = new MenuAction();&#10;        for (MenuEvent event : events) {&#10;            event.menuSelected(index, subIndex, menuAction);&#10;        }&#10;        if (!menuAction.isCancel()) {&#10;            setSelected(index, subIndex);&#10;        }&#10;    }&#10;&#10;    public void addMenuEvent(MenuEvent event) {&#10;        events.add(event);&#10;    }&#10;&#10;    public void hideMenuItem() {&#10;        for (Component com : panelMenu.getComponents()) {&#10;            if (com instanceof MenuItem) {&#10;                ((MenuItem) com).hideMenuItem();&#10;            }&#10;        }&#10;        revalidate();&#10;    }&#10;&#10;    public boolean isHideMenuTitleOnMinimum() {&#10;        return hideMenuTitleOnMinimum;&#10;    }&#10;&#10;    public int getMenuTitleLeftInset() {&#10;        return menuTitleLeftInset;&#10;    }&#10;&#10;    public int getMenuTitleVgap() {&#10;        return menuTitleVgap;&#10;    }&#10;&#10;    public int getMenuMaxWidth() {&#10;        return menuMaxWidth;&#10;    }&#10;&#10;    public int getMenuMinWidth() {&#10;        return menuMinWidth;&#10;    }&#10;&#10;    private JLabel header;&#10;    private JScrollPane scroll;&#10;    private JPanel panelMenu;&#10;&#10;    private class MenuLayout implements LayoutManager {&#10;&#10;        @Override&#10;        public void addLayoutComponent(String name, Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public void removeLayoutComponent(Component comp) {&#10;        }&#10;&#10;        @Override&#10;        public Dimension preferredLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(5, 5);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public Dimension minimumLayoutSize(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                return new Dimension(0, 0);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void layoutContainer(Container parent) {&#10;            synchronized (parent.getTreeLock()) {&#10;                Insets insets = parent.getInsets();&#10;                int x = insets.left + UIScale.scale(10); // Dịch vào trong 10px&#10;                int y = UIScale.scale(30); // Bắt đầu từ 30px để tránh chạm các nút điều khiển cửa sổ&#10;                int gap = UIScale.scale(3); // Giảm gap&#10;                int sheaderFullHgap = UIScale.scale(headerFullHgap);&#10;                int width = parent.getWidth() - (insets.left + insets.right) - UIScale.scale(20); // Giảm width để có margin 2 bên&#10;                int height = parent.getHeight() - y - insets.bottom - UIScale.scale(10); // Giảm height để có margin dưới&#10;                int iconWidth = width;&#10;                int iconHeight = header.getPreferredSize().height;&#10;                int hgap = menuFull ? sheaderFullHgap : 0;&#10;&#10;                header.setBounds(x + hgap, y, iconWidth - (hgap * 2), iconHeight);&#10;&#10;                int menux = x;&#10;                int menuy = y + iconHeight + gap;&#10;                int menuWidth = width;&#10;                int menuHeight = height - (iconHeight + gap);&#10;                scroll.setBounds(menux, menuy, menuWidth, menuHeight);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>